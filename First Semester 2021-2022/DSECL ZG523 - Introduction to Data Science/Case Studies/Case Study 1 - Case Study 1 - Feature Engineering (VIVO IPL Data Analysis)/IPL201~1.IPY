{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IPL 2019 Player Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Data Preparations & Exploratory Data Analysis (EDA) with Pandas<b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.1 Importing the required libraries<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.2 Loading players dataset into Pandas dataframe<b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sources : <br>\n",
    "https://www.iplt20.com/stats/2019/most-wickets <br>\n",
    "https://www.iplt20.com/stats/2019/most-runs<br>\n",
    "https://www.iplt20.com/stats/2019/player-points"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.2.1 Load and look the Batsman performance records<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting = pd.read_csv(\"VIVO IPL 2019 Player Batting Stat.csv\", encoding= 'unicode_escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.2.2 Load and look the Bowlers performance records<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling = pd.read_csv(\"VIVO IPL 2019 Player Bowling Stat.csv\", encoding= 'unicode_escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 10)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.2.3 Load and look the All players performance records<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls = pd.read_csv(\"VIVO IPL 2019 Player Point Stat.csv\", encoding= 'unicode_escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(162, 10)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.3. Taking a look at first / last few records of dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.3.1 Using head/tail functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>692</td>\n",
       "      <td>100*</td>\n",
       "      <td>481</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>57</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>100*</td>\n",
       "      <td>438</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>49</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>529</td>\n",
       "      <td>81</td>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>521</td>\n",
       "      <td>97*</td>\n",
       "      <td>384</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>510</td>\n",
       "      <td>80*</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   POS           PLAYER  Mat  Inns  NO  Runs    HS   BF  100  50  4s  6s\n",
       "0    1      DavidWarner   12    12   2   692  100*  481    1   8  57  21\n",
       "1    2         KL Rahul   14    14   3   593  100*  438    1   6  49  25\n",
       "2    3  Quinton de Kock   16    16   1   529    81  398    0   4  45  25\n",
       "3    4   Shikhar Dhawan   16    16   1   521   97*  384    0   5  64  11\n",
       "4    5    Andre Russell   14    13   4   510   80*  249    0   4  31  52"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>Carlos Brathwaite</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>Ishant Sharma</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>10*</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>Shakib Al Hasan</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>Pawan Negi</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>Tim Southee</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>9*</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS             PLAYER  Mat  Inns  NO  Runs   HS  BF  100  50  4s  6s\n",
       "95   96  Carlos Brathwaite    2     2   0    11    6  10    0   0   1   0\n",
       "96   97      Ishant Sharma   13     3   3    10  10*   3    0   0   1   1\n",
       "97   98    Shakib Al Hasan    3     1   0     9    9  10    0   0   0   0\n",
       "98   99         Pawan Negi    7     4   0     9    5  12    0   0   1   0\n",
       "99  100        Tim Southee    3     1   1     9   9*   9    0   0   0   0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>ImranTahir</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>64.2</td>\n",
       "      <td>431</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Kagiso Rabada</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>47.0</td>\n",
       "      <td>368</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Deepak Chahar</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shreyas Gopal</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>48.0</td>\n",
       "      <td>347</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Jasprit Bumrah</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>61.4</td>\n",
       "      <td>409</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Khaleel Ahmed</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>34.5</td>\n",
       "      <td>287</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Mohammad Shami</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>54.0</td>\n",
       "      <td>469</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Yuzvendra Chahal</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>49.2</td>\n",
       "      <td>386</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Rashid Khan</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>60.0</td>\n",
       "      <td>377</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Harbhajan Singh</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>44.0</td>\n",
       "      <td>312</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>Lasith Malinga</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>44.5</td>\n",
       "      <td>438</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>Ravindra Jadeja</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>54.0</td>\n",
       "      <td>343</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>Ravichandran Ashwin</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>55.0</td>\n",
       "      <td>400</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Hardik Pandya</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Rahul Chahar</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>47.0</td>\n",
       "      <td>308</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Ishant Sharma</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>46.0</td>\n",
       "      <td>349</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Bhuvneshwar Kumar</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>59.0</td>\n",
       "      <td>461</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Chris Morris</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>33.0</td>\n",
       "      <td>306</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>Krunal Pandya</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>46.0</td>\n",
       "      <td>335</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Sandeep Sharma</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>42.4</td>\n",
       "      <td>352</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS               PLAYER  Mat  Inns    Ov  Runs  Wkts  BBI  4w  5w\n",
       "0     1           ImranTahir   17    17  64.2   431    26    0   2   0\n",
       "1     2        Kagiso Rabada   12    12  47.0   368    25    0   2   0\n",
       "2     3        Deepak Chahar   17    17  64.3   482    22    0   0   0\n",
       "3     4        Shreyas Gopal   14    14  48.0   347    20    0   0   0\n",
       "4     5       Jasprit Bumrah   16    16  61.4   409    19    0   0   0\n",
       "5     6        Khaleel Ahmed    9     9  34.5   287    19    0   0   0\n",
       "6     7       Mohammad Shami   14    14  54.0   469    19    0   0   0\n",
       "7     8     Yuzvendra Chahal   14    14  49.2   386    18    0   1   0\n",
       "8     9          Rashid Khan   15    15  60.0   377    17    0   0   0\n",
       "9    10      Harbhajan Singh   11    11  44.0   312    16    0   0   0\n",
       "10   11       Lasith Malinga   12    12  44.5   438    16    0   2   0\n",
       "11   12      Ravindra Jadeja   16    16  54.0   343    15    0   0   0\n",
       "12   13  Ravichandran Ashwin   14    14  55.0   400    15    0   0   0\n",
       "13   14        Hardik Pandya   16    16  42.3   390    14    0   0   0\n",
       "14   15         Rahul Chahar   13    13  47.0   308    13    0   0   0\n",
       "15   16        Ishant Sharma   13    13  46.0   349    13    0   0   0\n",
       "16   17    Bhuvneshwar Kumar   15    15  59.0   461    13    0   0   0\n",
       "17   18         Chris Morris    9     9  33.0   306    13    0   0   0\n",
       "18   19        Krunal Pandya   16    16  46.0   335    12    0   0   0\n",
       "19   20       Sandeep Sharma   11    11  42.4   352    12    0   0   0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>160</td>\n",
       "      <td>Ashton Turner</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>161</td>\n",
       "      <td>Heinrich Klaasen</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>162</td>\n",
       "      <td>Ricky Bhui</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     POS            PLAYER  Pts  Mat  Wkts  Dots   4s   6s  Catches  Stumpings\n",
       "159  160     Ashton Turner  0.0  4.0   0.0   0.0  0.0  0.0      0.0        0.0\n",
       "160  161  Heinrich Klaasen  0.0  3.0   0.0   0.0  0.0  0.0      0.0        0.0\n",
       "161  162        Ricky Bhui  0.0  1.0   0.0   0.0  0.0  0.0      0.0        0.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.tail(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.3.2 Using transpose function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>...</th>\n",
       "      <th>98</th>\n",
       "      <th>99</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>POS</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>99</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLAYER</th>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>...</td>\n",
       "      <td>Pawan Negi</td>\n",
       "      <td>Tim Southee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mat</th>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Inns</th>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NO</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Runs</th>\n",
       "      <td>692</td>\n",
       "      <td>593</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HS</th>\n",
       "      <td>100*</td>\n",
       "      <td>100*</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>9*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BF</th>\n",
       "      <td>481</td>\n",
       "      <td>438</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4s</th>\n",
       "      <td>57</td>\n",
       "      <td>49</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6s</th>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12 rows × 100 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0         1   ...          98           99\n",
       "POS               1         2  ...          99          100\n",
       "PLAYER  DavidWarner  KL Rahul  ...  Pawan Negi  Tim Southee\n",
       "Mat              12        14  ...           7            3\n",
       "Inns             12        14  ...           4            1\n",
       "NO                2         3  ...           0            1\n",
       "Runs            692       593  ...           9            9\n",
       "HS             100*      100*  ...           5           9*\n",
       "BF              481       438  ...          12            9\n",
       "100               1         1  ...           0            0\n",
       "50                8         6  ...           0            0\n",
       "4s               57        49  ...           1            0\n",
       "6s               21        25  ...           0            0\n",
       "\n",
       "[12 rows x 100 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.4. Taking a look at attributes / dimenstions of dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'BF', '100', '50',\n",
       "       '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "POS        int64\n",
       "PLAYER    object\n",
       "Mat        int64\n",
       "Inns       int64\n",
       "NO         int64\n",
       "Runs       int64\n",
       "HS        object\n",
       "BF         int64\n",
       "100        int64\n",
       "50         int64\n",
       "4s         int64\n",
       "6s         int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 12 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   POS     100 non-null    int64 \n",
      " 1   PLAYER  100 non-null    object\n",
      " 2   Mat     100 non-null    int64 \n",
      " 3   Inns    100 non-null    int64 \n",
      " 4   NO      100 non-null    int64 \n",
      " 5   Runs    100 non-null    int64 \n",
      " 6   HS      100 non-null    object\n",
      " 7   BF      100 non-null    int64 \n",
      " 8   100     100 non-null    int64 \n",
      " 9   50      100 non-null    int64 \n",
      " 10  4s      100 non-null    int64 \n",
      " 11  6s      100 non-null    int64 \n",
      "dtypes: int64(10), object(2)\n",
      "memory usage: 9.5+ KB\n"
     ]
    }
   ],
   "source": [
    "batting.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'Ov', 'Runs', 'Wkts', 'BBI', '4w',\n",
       "       '5w'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 10 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   POS     100 non-null    int64  \n",
      " 1   PLAYER  100 non-null    object \n",
      " 2   Mat     100 non-null    int64  \n",
      " 3   Inns    100 non-null    int64  \n",
      " 4   Ov      100 non-null    float64\n",
      " 5   Runs    100 non-null    int64  \n",
      " 6   Wkts    100 non-null    int64  \n",
      " 7   BBI     100 non-null    int64  \n",
      " 8   4w      100 non-null    int64  \n",
      " 9   5w      100 non-null    int64  \n",
      "dtypes: float64(1), int64(8), object(1)\n",
      "memory usage: 7.9+ KB\n"
     ]
    }
   ],
   "source": [
    "bowling.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Pts', 'Mat', 'Wkts', 'Dots', '4s', '6s', 'Catches',\n",
       "       'Stumpings'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 162 entries, 0 to 161\n",
      "Data columns (total 10 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   POS        162 non-null    int64  \n",
      " 1   PLAYER     162 non-null    object \n",
      " 2   Pts        161 non-null    float64\n",
      " 3   Mat        161 non-null    float64\n",
      " 4   Wkts       161 non-null    float64\n",
      " 5   Dots       161 non-null    float64\n",
      " 6   4s         161 non-null    float64\n",
      " 7   6s         161 non-null    float64\n",
      " 8   Catches    161 non-null    float64\n",
      " 9   Stumpings  161 non-null    float64\n",
      "dtypes: float64(8), int64(1), object(1)\n",
      "memory usage: 12.8+ KB\n"
     ]
    }
   ],
   "source": [
    "alls.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.5 Finding Summary of the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.0000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>10.050000</td>\n",
       "      <td>8.250000</td>\n",
       "      <td>1.840000</td>\n",
       "      <td>184.2600</td>\n",
       "      <td>136.590000</td>\n",
       "      <td>0.060000</td>\n",
       "      <td>1.060000</td>\n",
       "      <td>16.440000</td>\n",
       "      <td>7.820000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>29.011492</td>\n",
       "      <td>4.656645</td>\n",
       "      <td>4.757503</td>\n",
       "      <td>1.846208</td>\n",
       "      <td>173.3093</td>\n",
       "      <td>123.211987</td>\n",
       "      <td>0.238683</td>\n",
       "      <td>1.594308</td>\n",
       "      <td>16.842899</td>\n",
       "      <td>9.053578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.750000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.2500</td>\n",
       "      <td>31.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>108.0000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75.250000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>12.250000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>334.5000</td>\n",
       "      <td>239.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>10.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>692.0000</td>\n",
       "      <td>481.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>52.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              POS         Mat        Inns          NO      Runs          BF  \\\n",
       "count  100.000000  100.000000  100.000000  100.000000  100.0000  100.000000   \n",
       "mean    50.500000   10.050000    8.250000    1.840000  184.2600  136.590000   \n",
       "std     29.011492    4.656645    4.757503    1.846208  173.3093  123.211987   \n",
       "min      1.000000    1.000000    1.000000    0.000000    9.0000    3.000000   \n",
       "25%     25.750000    7.000000    4.000000    0.000000   36.2500   31.750000   \n",
       "50%     50.500000   11.000000    7.500000    1.000000  108.0000   87.000000   \n",
       "75%     75.250000   14.000000   12.250000    3.000000  334.5000  239.750000   \n",
       "max    100.000000   17.000000   17.000000    8.000000  692.0000  481.000000   \n",
       "\n",
       "              100          50          4s          6s  \n",
       "count  100.000000  100.000000  100.000000  100.000000  \n",
       "mean     0.060000    1.060000   16.440000    7.820000  \n",
       "std      0.238683    1.594308   16.842899    9.053578  \n",
       "min      0.000000    0.000000    0.000000    0.000000  \n",
       "25%      0.000000    0.000000    2.000000    1.000000  \n",
       "50%      0.000000    0.000000   10.000000    4.000000  \n",
       "75%      0.000000    2.000000   28.000000   10.250000  \n",
       "max      1.000000    8.000000   64.000000   52.000000  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>7.800000</td>\n",
       "      <td>6.860000</td>\n",
       "      <td>22.923000</td>\n",
       "      <td>189.630000</td>\n",
       "      <td>6.390000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>29.011492</td>\n",
       "      <td>4.903101</td>\n",
       "      <td>4.880429</td>\n",
       "      <td>18.685796</td>\n",
       "      <td>142.860082</td>\n",
       "      <td>6.372122</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.378594</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.875000</td>\n",
       "      <td>58.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>17.500000</td>\n",
       "      <td>164.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75.250000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>40.050000</td>\n",
       "      <td>324.750000</td>\n",
       "      <td>10.250000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>64.300000</td>\n",
       "      <td>482.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              POS         Mat        Inns          Ov        Runs        Wkts  \\\n",
       "count  100.000000  100.000000  100.000000  100.000000  100.000000  100.000000   \n",
       "mean    50.500000    7.800000    6.860000   22.923000  189.630000    6.390000   \n",
       "std     29.011492    4.903101    4.880429   18.685796  142.860082    6.372122   \n",
       "min      1.000000    1.000000    1.000000    1.000000    6.000000    0.000000   \n",
       "25%     25.750000    3.000000    2.000000    6.875000   58.500000    1.000000   \n",
       "50%     50.500000    7.500000    6.000000   17.500000  164.000000    4.000000   \n",
       "75%     75.250000   12.000000   11.000000   40.050000  324.750000   10.250000   \n",
       "max    100.000000   17.000000   17.000000   64.300000  482.000000   26.000000   \n",
       "\n",
       "         BBI          4w      5w  \n",
       "count  100.0  100.000000  100.00  \n",
       "mean     0.0    0.090000    0.01  \n",
       "std      0.0    0.378594    0.10  \n",
       "min      0.0    0.000000    0.00  \n",
       "25%      0.0    0.000000    0.00  \n",
       "50%      0.0    0.000000    0.00  \n",
       "75%      0.0    0.000000    0.00  \n",
       "max      0.0    2.000000    1.00  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>162.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>161.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>81.500000</td>\n",
       "      <td>96.034161</td>\n",
       "      <td>8.186335</td>\n",
       "      <td>3.962733</td>\n",
       "      <td>31.813665</td>\n",
       "      <td>10.267081</td>\n",
       "      <td>4.869565</td>\n",
       "      <td>2.937888</td>\n",
       "      <td>0.118012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>46.909487</td>\n",
       "      <td>81.473733</td>\n",
       "      <td>5.220399</td>\n",
       "      <td>5.902212</td>\n",
       "      <td>44.624013</td>\n",
       "      <td>15.441728</td>\n",
       "      <td>8.067783</td>\n",
       "      <td>3.293345</td>\n",
       "      <td>0.674341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>41.250000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>81.500000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>121.750000</td>\n",
       "      <td>164.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>162.000000</td>\n",
       "      <td>369.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              POS         Pts         Mat        Wkts        Dots          4s  \\\n",
       "count  162.000000  161.000000  161.000000  161.000000  161.000000  161.000000   \n",
       "mean    81.500000   96.034161    8.186335    3.962733   31.813665   10.267081   \n",
       "std     46.909487   81.473733    5.220399    5.902212   44.624013   15.441728   \n",
       "min      1.000000    0.000000    1.000000    0.000000    0.000000    0.000000   \n",
       "25%     41.250000   24.000000    3.000000    0.000000    0.000000    0.000000   \n",
       "50%     81.500000   74.000000    8.000000    1.000000    8.000000    2.000000   \n",
       "75%    121.750000  164.000000   13.000000    6.000000   54.000000   14.000000   \n",
       "max    162.000000  369.000000   17.000000   26.000000  190.000000   64.000000   \n",
       "\n",
       "               6s     Catches   Stumpings  \n",
       "count  161.000000  161.000000  161.000000  \n",
       "mean     4.869565    2.937888    0.118012  \n",
       "std      8.067783    3.293345    0.674341  \n",
       "min      0.000000    0.000000    0.000000  \n",
       "25%      0.000000    0.000000    0.000000  \n",
       "50%      1.000000    2.000000    0.000000  \n",
       "75%      7.000000    5.000000    0.000000  \n",
       "max     52.000000   18.000000    6.000000  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    161.000000\n",
       "mean       8.186335\n",
       "std        5.220399\n",
       "min        1.000000\n",
       "25%        3.000000\n",
       "50%        8.000000\n",
       "75%       13.000000\n",
       "max       17.000000\n",
       "Name: Mat, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.Mat.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.6 Using value counts on DataFrame column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'BF', '100', '50',\n",
       "       '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12, 14, 16, 13, 10, 15, 17,  8, 11,  7,  9,  4,  3,  5,  2,  1])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.Mat.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14    12\n",
       "16    10\n",
       "12    10\n",
       "13     8\n",
       "8      7\n",
       "3      7\n",
       "7      6\n",
       "4      6\n",
       "15     5\n",
       "11     5\n",
       "10     5\n",
       "9      5\n",
       "5      5\n",
       "17     3\n",
       "2      3\n",
       "1      3\n",
       "Name: Mat, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.Mat.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'Ov', 'Runs', 'Wkts', 'BBI', '4w',\n",
       "       '5w'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2     14\n",
       "1     12\n",
       "3     11\n",
       "5      8\n",
       "11     7\n",
       "6      7\n",
       "9      7\n",
       "12     5\n",
       "14     5\n",
       "16     4\n",
       "13     4\n",
       "4      4\n",
       "8      3\n",
       "7      3\n",
       "10     2\n",
       "15     2\n",
       "17     2\n",
       "Name: Inns, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.Inns.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Pts', 'Mat', 'Wkts', 'Dots', '4s', '6s', 'Catches',\n",
       "       'Stumpings'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0     11.801242\n",
       "3.0      9.316770\n",
       "14.0     8.695652\n",
       "2.0      7.453416\n",
       "12.0     6.832298\n",
       "16.0     6.832298\n",
       "5.0      6.211180\n",
       "4.0      5.590062\n",
       "11.0     5.590062\n",
       "13.0     5.590062\n",
       "8.0      4.968944\n",
       "7.0      4.347826\n",
       "9.0      4.347826\n",
       "10.0     4.347826\n",
       "15.0     3.105590\n",
       "17.0     3.105590\n",
       "6.0      1.863354\n",
       "Name: Mat, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.Mat.value_counts(normalize=True)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.7 Using cross tabs on DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> https://pbpython.com/pandas-crosstab.html\n",
    "    Similar to creating a Pivot table in excel "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'BF', '100', '50',\n",
       "       '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>100</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mat</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "100   0  1\n",
       "Mat       \n",
       "1     3  0\n",
       "2     3  0\n",
       "3     7  0\n",
       "4     6  0\n",
       "5     5  0\n",
       "7     6  0\n",
       "8     7  0\n",
       "9     5  0\n",
       "10    4  1\n",
       "11    5  0\n",
       "12    8  2\n",
       "13    8  0\n",
       "14    9  3\n",
       "15    5  0\n",
       "16   10  0\n",
       "17    3  0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(batting['Mat'], batting['100'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.8 Sorting DataFrame<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>692</td>\n",
       "      <td>100*</td>\n",
       "      <td>481</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>57</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>100*</td>\n",
       "      <td>438</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>49</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>529</td>\n",
       "      <td>81</td>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>521</td>\n",
       "      <td>97*</td>\n",
       "      <td>384</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>510</td>\n",
       "      <td>80*</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   POS           PLAYER  Mat  Inns  NO  Runs    HS   BF  100  50  4s  6s\n",
       "0    1      DavidWarner   12    12   2   692  100*  481    1   8  57  21\n",
       "1    2         KL Rahul   14    14   3   593  100*  438    1   6  49  25\n",
       "2    3  Quinton de Kock   16    16   1   529    81  398    0   4  45  25\n",
       "3    4   Shikhar Dhawan   16    16   1   521   97*  384    0   5  64  11\n",
       "4    5    Andre Russell   14    13   4   510   80*  249    0   4  31  52"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>83</td>\n",
       "      <td>Prayas Ray Barman</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>89</td>\n",
       "      <td>Siddhesh Lad</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>87</td>\n",
       "      <td>Simran Singh</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>Carlos Brathwaite</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>66</td>\n",
       "      <td>Murali Vijay</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>38</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS             PLAYER  Mat  Inns  NO  Runs  HS  BF  100  50  4s  6s\n",
       "82   83  Prayas Ray Barman    1     1   0    19  19  24    0   0   2   0\n",
       "88   89       Siddhesh Lad    1     1   0    15  15  13    0   0   1   1\n",
       "86   87       Simran Singh    1     1   0    16  16  17    0   0   1   1\n",
       "95   96  Carlos Brathwaite    2     2   0    11   6  10    0   0   1   0\n",
       "65   66       Murali Vijay    2     2   0    64  38  61    0   0   6   1"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.sort_values('Mat').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Suresh Raina</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>59</td>\n",
       "      <td>314</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>45</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>Ambati Rayudu</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>282</td>\n",
       "      <td>57</td>\n",
       "      <td>303</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Shane Watson</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>398</td>\n",
       "      <td>96</td>\n",
       "      <td>312</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>42</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>Ravindra Jadeja</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>31*</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Hardik Pandya</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>402</td>\n",
       "      <td>91</td>\n",
       "      <td>210</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS           PLAYER  Mat  Inns  NO  Runs   HS   BF  100  50  4s  6s\n",
       "19   20     Suresh Raina   17    17   1   383   59  314    0   3  45   9\n",
       "29   30    Ambati Rayudu   17    17   5   282   57  303    0   1  20   7\n",
       "16   17     Shane Watson   17    17   0   398   96  312    0   3  42  20\n",
       "50   51  Ravindra Jadeja   16     9   6   106  31*   88    0   0   7   4\n",
       "15   16    Hardik Pandya   16    15   6   402   91  210    0   1  28  29"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.sort_values('Mat', ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>692</td>\n",
       "      <td>100*</td>\n",
       "      <td>481</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>57</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>100*</td>\n",
       "      <td>438</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>49</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>529</td>\n",
       "      <td>81</td>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>521</td>\n",
       "      <td>97*</td>\n",
       "      <td>384</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>510</td>\n",
       "      <td>80*</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   POS           PLAYER  Mat  Inns  NO  Runs    HS   BF  100  50  4s  6s\n",
       "0    1      DavidWarner   12    12   2   692  100*  481    1   8  57  21\n",
       "1    2         KL Rahul   14    14   3   593  100*  438    1   6  49  25\n",
       "2    3  Quinton de Kock   16    16   1   529    81  398    0   4  45  25\n",
       "3    4   Shikhar Dhawan   16    16   1   521   97*  384    0   5  64  11\n",
       "4    5    Andre Russell   14    13   4   510   80*  249    0   4  31  52"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Shane Watson</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>398</td>\n",
       "      <td>96</td>\n",
       "      <td>312</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>42</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Suresh Raina</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>59</td>\n",
       "      <td>314</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>45</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>Ambati Rayudu</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>282</td>\n",
       "      <td>57</td>\n",
       "      <td>303</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>529</td>\n",
       "      <td>81</td>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>521</td>\n",
       "      <td>97*</td>\n",
       "      <td>384</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS           PLAYER  Mat  Inns  NO  Runs   HS   BF  100  50  4s  6s\n",
       "16   17     Shane Watson   17    17   0   398   96  312    0   3  42  20\n",
       "19   20     Suresh Raina   17    17   1   383   59  314    0   3  45   9\n",
       "29   30    Ambati Rayudu   17    17   5   282   57  303    0   1  20   7\n",
       "2     3  Quinton de Kock   16    16   1   529   81  398    0   4  45  25\n",
       "3     4   Shikhar Dhawan   16    16   1   521  97*  384    0   5  64  11"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.sort_values(['Mat', 'Runs'], ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.8 Slicing DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.8.1. Based on rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>692</td>\n",
       "      <td>100*</td>\n",
       "      <td>481</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>57</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>100*</td>\n",
       "      <td>438</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>49</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>529</td>\n",
       "      <td>81</td>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>521</td>\n",
       "      <td>97*</td>\n",
       "      <td>384</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>510</td>\n",
       "      <td>80*</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Chris Gayle</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>490</td>\n",
       "      <td>99*</td>\n",
       "      <td>319</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Rishabh Pant</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>488</td>\n",
       "      <td>78*</td>\n",
       "      <td>300</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>37</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Virat Kohli</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>464</td>\n",
       "      <td>100</td>\n",
       "      <td>328</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Shreyas Iyer</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>463</td>\n",
       "      <td>67</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>41</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Jonny Bairstow</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>445</td>\n",
       "      <td>114</td>\n",
       "      <td>283</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>48</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   POS           PLAYER  Mat  Inns  NO  Runs    HS   BF  100  50  4s  6s\n",
       "0    1      DavidWarner   12    12   2   692  100*  481    1   8  57  21\n",
       "1    2         KL Rahul   14    14   3   593  100*  438    1   6  49  25\n",
       "2    3  Quinton de Kock   16    16   1   529    81  398    0   4  45  25\n",
       "3    4   Shikhar Dhawan   16    16   1   521   97*  384    0   5  64  11\n",
       "4    5    Andre Russell   14    13   4   510   80*  249    0   4  31  52\n",
       "5    6      Chris Gayle   13    13   1   490   99*  319    0   4  45  34\n",
       "6    7     Rishabh Pant   16    16   3   488   78*  300    0   3  37  27\n",
       "7    8      Virat Kohli   14    14   0   464   100  328    1   2  46  13\n",
       "8    9     Shreyas Iyer   16    16   1   463    67  386    0   3  41  14\n",
       "9   10   Jonny Bairstow   10    10   2   445   114  283    1   2  48  18"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting[0:10] # first ten records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>4s</th>\n",
       "      <th>6s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>Carlos Brathwaite</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>Ishant Sharma</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>10*</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>Shakib Al Hasan</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>Pawan Negi</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>Tim Southee</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>9*</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    POS             PLAYER  Mat  Inns  NO  Runs   HS  BF  100  50  4s  6s\n",
       "95   96  Carlos Brathwaite    2     2   0    11    6  10    0   0   1   0\n",
       "96   97      Ishant Sharma   13     3   3    10  10*   3    0   0   1   1\n",
       "97   98    Shakib Al Hasan    3     1   0     9    9  10    0   0   0   0\n",
       "98   99         Pawan Negi    7     4   0     9    5  12    0   0   1   0\n",
       "99  100        Tim Southee    3     1   1     9   9*   9    0   0   0   0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting[-5:] #last five values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.8.2. Based on columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0           DavidWarner\n",
       "1              KL Rahul\n",
       "2       Quinton de Kock\n",
       "3        Shikhar Dhawan\n",
       "4         Andre Russell\n",
       "            ...        \n",
       "95    Carlos Brathwaite\n",
       "96        Ishant Sharma\n",
       "97      Shakib Al Hasan\n",
       "98           Pawan Negi\n",
       "99          Tim Southee\n",
       "Name: PLAYER, Length: 100, dtype: object"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting['PLAYER']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        DavidWarner\n",
       "1           KL Rahul\n",
       "2    Quinton de Kock\n",
       "Name: PLAYER, dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting[\"PLAYER\"][0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            PLAYER  Mat\n",
       "0      DavidWarner   12\n",
       "1         KL Rahul   14\n",
       "2  Quinton de Kock   16"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting[[\"PLAYER\", \"Mat\"]][0:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.8.3. Based on index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Mat</th>\n",
       "      <th>Inns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            PLAYER  Mat  Inns\n",
       "1         KL Rahul   14    14\n",
       "2  Quinton de Kock   16    16"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.iloc[1:3, 1:4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.9. Renaming columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.9.1 Renaming batting columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'BF', '100', '50',\n",
       "       '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting.rename(columns={'POS':'Bat_POS'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bat_POS', 'PLAYER', 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'BF', '100',\n",
       "       '50', '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting.rename(columns={'Mat':'Bat_Mat'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting.rename(columns={'Inns':'Bat_Inns'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting.rename(columns={'Runs':'Bat_Runs'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bat_POS', 'PLAYER', 'Bat_Mat', 'Bat_Inns', 'NO', 'Bat_Runs', 'HS',\n",
       "       'BF', '100', '50', '4s', '6s'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.9.2 Renaming bowling columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Mat', 'Inns', 'Ov', 'Runs', 'Wkts', 'BBI', '4w',\n",
       "       '5w'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling.rename(columns={'POS':'Bow_POS'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling.rename(columns={'Mat':'Bow_Mat'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling.rename(columns={'Inns':'Bow_Inns'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling.rename(columns={'Runs':'Bow_Runs'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bow_POS', 'PLAYER', 'Bow_Mat', 'Bow_Inns', 'Ov', 'Bow_Runs', 'Wkts',\n",
       "       'BBI', '4w', '5w'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.9.3 Renaming alls columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POS', 'PLAYER', 'Pts', 'Mat', 'Wkts', 'Dots', '4s', '6s', 'Catches',\n",
       "       'Stumpings'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls.rename(columns={'POS':'alls_POS'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls.rename(columns={'Mat':'alls_Mat'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls.rename(columns={'Wkts':'alls_Wkts'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls.rename(columns={'4s':'alls_4s'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls.rename(columns={'6s':'alls_6s'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'PLAYER', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.10. Creating new columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.10.1 Creating new columns -batting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting['Bat_Avg'] = (batting['Bat_Runs']/ (batting['Bat_Inns'] - batting['NO'])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    69.200000\n",
       "1    53.909091\n",
       "2    35.266667\n",
       "3    34.733333\n",
       "4    56.666667\n",
       "Name: Bat_Avg, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting['Bat_Avg'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting['Bat_SR'] = (batting['Bat_Runs']/ batting['BF']) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    143.866944\n",
       "1    135.388128\n",
       "2    132.914573\n",
       "3    135.677083\n",
       "4    204.819277\n",
       "Name: Bat_SR, dtype: float64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting['Bat_SR'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bat_POS', 'PLAYER', 'Bat_Mat', 'Bat_Inns', 'NO', 'Bat_Runs', 'HS',\n",
       "       'BF', '100', '50', '4s', '6s', 'Bat_Avg', 'Bat_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.10.2 Creating new columns - bowling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling['Bow_Avg'] = (bowling['Bow_Runs']/ bowling['Wkts']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    386.0\n",
       "1    282.0\n",
       "2    387.0\n",
       "3    288.0\n",
       "4    370.0\n",
       "Name: Balls, dtype: float64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling[\"Balls\"] = (bowling[\"Ov\"] - bowling[\"Ov\"].apply(int)) * 10 + bowling[\"Ov\"].apply(int) * 6\n",
    "bowling.Balls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6.699482\n",
       "1    7.829787\n",
       "2    7.472868\n",
       "3    7.229167\n",
       "4    6.632432\n",
       "Name: economy, dtype: float64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling['economy'] = (bowling['Bow_Runs']/ bowling['Balls']) * 6\n",
    "bowling['economy'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    14.846154\n",
       "1    11.280000\n",
       "2    17.590909\n",
       "3    14.400000\n",
       "4    19.473684\n",
       "Name: Bow_SR, dtype: float64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling['Bow_SR'] = (bowling['Balls']/ bowling['Wkts']) \n",
    "bowling['Bow_SR'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bow_POS', 'PLAYER', 'Bow_Mat', 'Bow_Inns', 'Ov', 'Bow_Runs', 'Wkts',\n",
       "       'BBI', '4w', '5w', 'Bow_Avg', 'Balls', 'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.11. Modifying the data values of a column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting['HS'] = batting['HS'].str.replace(r'*', '')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.12. Quick data exploration on data frame columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "batting.replace(np.nan, 0, inplace=True)\n",
    "batting.replace(np.inf, 0, inplace=True)\n",
    "batting = batting.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([16., 17., 24., 20., 13.,  4.,  4.,  0.,  1.,  1.]),\n",
       " array([ 0.  ,  8.32, 16.64, 24.96, 33.28, 41.6 , 49.92, 58.24, 66.56,\n",
       "        74.88, 83.2 ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting[\"Bat_Avg\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 9., 22., 42., 21.,  3.,  2.,  0.,  0.,  0.,  1.]),\n",
       " array([ 63.16 ,  90.177, 117.194, 144.211, 171.228, 198.245, 225.262,\n",
       "        252.279, 279.296, 306.313, 333.33 ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting[\"Bat_SR\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bat_POS', 'PLAYER', 'Bat_Mat', 'Bat_Inns', 'NO', 'Bat_Runs', 'HS',\n",
       "       'BF', '100', '50', '4s', '6s', 'Bat_Avg', 'Bat_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "box = plt.boxplot(batting['Bat_Runs'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Bat_SR')"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(batting[\"Bat_Avg\"], batting[\"Bat_SR\"])\n",
    "plt.xlabel(\"Bat_Avg\")\n",
    "plt.ylabel(\"Bat_SR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7ffafb0ecaf0>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 438.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(data=batting, x = \"Bat_Avg\", y='Bat_SR', hue=\"Bat_Inns\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "bowling.replace(np.nan, 0, inplace=True)\n",
    "bowling.replace(np.inf, 0, inplace=True)\n",
    "bowling = bowling.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([20., 41., 22.,  9.,  4.,  2.,  0.,  1.,  0.,  1.]),\n",
       " array([  0. ,  16.6,  33.2,  49.8,  66.4,  83. ,  99.6, 116.2, 132.8,\n",
       "        149.4, 166. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(bowling[\"Bow_Avg\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Bow_SR')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(bowling[\"Bow_Avg\"], bowling[\"Bow_SR\"])\n",
    "plt.xlabel(\"Bow_Avg\")\n",
    "plt.ylabel(\"Bow_SR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Bow_POS', 'PLAYER', 'Bow_Mat', 'Bow_Inns', 'Ov', 'Bow_Runs', 'Wkts',\n",
       "       'BBI', '4w', '5w', 'Bow_Avg', 'Balls', 'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowling.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "box = plt.boxplot(bowling['Wkts'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7ffafb53de20>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 442.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(data=bowling, x = \"Bow_Avg\", y='Bow_SR', hue=\"Bow_Inns\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'PLAYER', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alls.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nsumita/opt/anaconda3/lib/python3.8/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/Users/nsumita/opt/anaconda3/lib/python3.8/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([48., 32., 16., 16., 23., 14.,  9.,  1.,  0.,  2.]),\n",
       " array([  0. ,  36.9,  73.8, 110.7, 147.6, 184.5, 221.4, 258.3, 295.2,\n",
       "        332.1, 369. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(alls[\"Pts\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'alls_Wkts')"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(alls[\"Pts\"], alls[\"alls_Wkts\"])\n",
    "plt.xlabel(\"Pts\")\n",
    "plt.ylabel(\"alls_Wkts\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'alls_4s')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(alls[\"Pts\"], alls[\"alls_4s\"])\n",
    "plt.xlabel(\"Pts\")\n",
    "plt.ylabel(\"alls_4s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Stumpings')"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(alls[\"Pts\"], alls[\"Stumpings\"])\n",
    "plt.xlabel(\"Pts\")\n",
    "plt.ylabel(\"Stumpings\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7ffafba7b940>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 442.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.relplot(data=alls, x=\"alls_Mat\", y='Pts', hue=\"alls_Wkts\", size=\"alls_4s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.13 Merging the dataframes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.13.1 Default merge - inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge = pd.merge(batting, bowling, on='PLAYER')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 27)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Bat_Mat</th>\n",
       "      <th>Bat_Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Bat_Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>510</td>\n",
       "      <td>80</td>\n",
       "      <td>249</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>30.1</td>\n",
       "      <td>287</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.09</td>\n",
       "      <td>181.0</td>\n",
       "      <td>9.51</td>\n",
       "      <td>16.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "      <td>Hardik Pandya</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>402</td>\n",
       "      <td>91</td>\n",
       "      <td>210</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>Suresh Raina</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>59</td>\n",
       "      <td>314</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24</td>\n",
       "      <td>Nitish Rana</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>344</td>\n",
       "      <td>85</td>\n",
       "      <td>235</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>72</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24.00</td>\n",
       "      <td>48.0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>34</td>\n",
       "      <td>Vijay Shankar</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>244</td>\n",
       "      <td>40</td>\n",
       "      <td>193</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70.00</td>\n",
       "      <td>48.0</td>\n",
       "      <td>8.75</td>\n",
       "      <td>48.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bat_POS         PLAYER  Bat_Mat  Bat_Inns  NO  Bat_Runs  HS   BF  100  50  \\\n",
       "0        5  Andre Russell       14        13   4       510  80  249    0   4   \n",
       "1       16  Hardik Pandya       16        15   6       402  91  210    0   1   \n",
       "2       20   Suresh Raina       17        17   1       383  59  314    0   3   \n",
       "3       24    Nitish Rana       14        11   1       344  85  235    0   3   \n",
       "4       34  Vijay Shankar       15        14   2       244  40  193    0   0   \n",
       "\n",
       "   ...    Ov  Bow_Runs  Wkts  BBI  4w  5w  Bow_Avg  Balls  economy  Bow_SR  \n",
       "0  ...  30.1       287    11    0   0   0    26.09  181.0     9.51   16.45  \n",
       "1  ...  42.3       390    14    0   0   0    27.86  255.0     9.18   18.21  \n",
       "2  ...   1.0         6     0    0   0   0     0.00    6.0     6.00    0.00  \n",
       "3  ...   8.0        72     3    0   0   0    24.00   48.0     9.00   16.00  \n",
       "4  ...   8.0        70     1    0   0   0    70.00   48.0     8.75   48.00  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Bat_Mat</th>\n",
       "      <th>Bat_Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Bat_Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>96</td>\n",
       "      <td>Carlos Brathwaite</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>9.67</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>97</td>\n",
       "      <td>Ishant Sharma</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>46.0</td>\n",
       "      <td>349</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.85</td>\n",
       "      <td>276.0</td>\n",
       "      <td>7.59</td>\n",
       "      <td>21.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>98</td>\n",
       "      <td>Shakib Al Hasan</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.5</td>\n",
       "      <td>95</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47.50</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8.77</td>\n",
       "      <td>32.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>99</td>\n",
       "      <td>Pawan Negi</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.1</td>\n",
       "      <td>102</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.00</td>\n",
       "      <td>67.0</td>\n",
       "      <td>9.13</td>\n",
       "      <td>22.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>100</td>\n",
       "      <td>Tim Southee</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>118</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118.00</td>\n",
       "      <td>54.0</td>\n",
       "      <td>13.11</td>\n",
       "      <td>54.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Bat_POS             PLAYER  Bat_Mat  Bat_Inns  NO  Bat_Runs  HS  BF  100  \\\n",
       "45       96  Carlos Brathwaite        2         2   0        11   6  10    0   \n",
       "46       97      Ishant Sharma       13         3   3        10  10   3    0   \n",
       "47       98    Shakib Al Hasan        3         1   0         9   9  10    0   \n",
       "48       99         Pawan Negi        7         4   0         9   5  12    0   \n",
       "49      100        Tim Southee        3         1   1         9   9   9    0   \n",
       "\n",
       "    50  ...    Ov  Bow_Runs  Wkts  BBI  4w  5w  Bow_Avg  Balls  economy  \\\n",
       "45   0  ...   3.0        29     0    0   0   0     0.00   18.0     9.67   \n",
       "46   0  ...  46.0       349    13    0   0   0    26.85  276.0     7.59   \n",
       "47   0  ...  10.5        95     2    0   0   0    47.50   65.0     8.77   \n",
       "48   0  ...  11.1       102     3    0   0   0    34.00   67.0     9.13   \n",
       "49   0  ...   9.0       118     1    0   0   0   118.00   54.0    13.11   \n",
       "\n",
       "    Bow_SR  \n",
       "45    0.00  \n",
       "46   21.23  \n",
       "47   32.50  \n",
       "48   22.33  \n",
       "49   54.00  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.13.2 Applying merge - outer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer_1 = pd.merge(batting, bowling, on='PLAYER', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 27)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer_1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Bat_Mat</th>\n",
       "      <th>Bat_Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Bat_Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>DavidWarner</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>692.0</td>\n",
       "      <td>100</td>\n",
       "      <td>481.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>KL Rahul</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>100</td>\n",
       "      <td>438.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Quinton de Kock</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>529.0</td>\n",
       "      <td>81</td>\n",
       "      <td>398.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Shikhar Dhawan</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>521.0</td>\n",
       "      <td>97</td>\n",
       "      <td>384.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>Andre Russell</td>\n",
       "      <td>14.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>510.0</td>\n",
       "      <td>80</td>\n",
       "      <td>249.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.1</td>\n",
       "      <td>287.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.09</td>\n",
       "      <td>181.0</td>\n",
       "      <td>9.51</td>\n",
       "      <td>16.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bat_POS           PLAYER  Bat_Mat  Bat_Inns   NO  Bat_Runs   HS     BF  \\\n",
       "0      1.0      DavidWarner     12.0      12.0  2.0     692.0  100  481.0   \n",
       "1      2.0         KL Rahul     14.0      14.0  3.0     593.0  100  438.0   \n",
       "2      3.0  Quinton de Kock     16.0      16.0  1.0     529.0   81  398.0   \n",
       "3      4.0   Shikhar Dhawan     16.0      16.0  1.0     521.0   97  384.0   \n",
       "4      5.0    Andre Russell     14.0      13.0  4.0     510.0   80  249.0   \n",
       "\n",
       "   100   50  ...    Ov  Bow_Runs  Wkts  BBI   4w   5w  Bow_Avg  Balls  \\\n",
       "0  1.0  8.0  ...   NaN       NaN   NaN  NaN  NaN  NaN      NaN    NaN   \n",
       "1  1.0  6.0  ...   NaN       NaN   NaN  NaN  NaN  NaN      NaN    NaN   \n",
       "2  0.0  4.0  ...   NaN       NaN   NaN  NaN  NaN  NaN      NaN    NaN   \n",
       "3  0.0  5.0  ...   NaN       NaN   NaN  NaN  NaN  NaN      NaN    NaN   \n",
       "4  0.0  4.0  ...  30.1     287.0  11.0  0.0  0.0  0.0    26.09  181.0   \n",
       "\n",
       "   economy  Bow_SR  \n",
       "0      NaN     NaN  \n",
       "1      NaN     NaN  \n",
       "2      NaN     NaN  \n",
       "3      NaN     NaN  \n",
       "4     9.51   16.45  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Bat_Mat</th>\n",
       "      <th>Bat_Inns</th>\n",
       "      <th>NO</th>\n",
       "      <th>Bat_Runs</th>\n",
       "      <th>HS</th>\n",
       "      <th>BF</th>\n",
       "      <th>100</th>\n",
       "      <th>50</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Hanuma Vihari</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Basil Thampi</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>9.17</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Avesh Khan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Rasikh Salam</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>10.50</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Barinder Sran</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>12.75</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Bat_POS         PLAYER  Bat_Mat  Bat_Inns  NO  Bat_Runs   HS  BF  100  \\\n",
       "145      NaN  Hanuma Vihari      NaN       NaN NaN       NaN  NaN NaN  NaN   \n",
       "146      NaN   Basil Thampi      NaN       NaN NaN       NaN  NaN NaN  NaN   \n",
       "147      NaN     Avesh Khan      NaN       NaN NaN       NaN  NaN NaN  NaN   \n",
       "148      NaN   Rasikh Salam      NaN       NaN NaN       NaN  NaN NaN  NaN   \n",
       "149      NaN  Barinder Sran      NaN       NaN NaN       NaN  NaN NaN  NaN   \n",
       "\n",
       "     50  ...    Ov  Bow_Runs  Wkts  BBI   4w   5w  Bow_Avg  Balls  economy  \\\n",
       "145 NaN  ...   1.0       9.0   0.0  0.0  0.0  0.0      0.0    6.0     9.00   \n",
       "146 NaN  ...  12.0     110.0   0.0  0.0  0.0  0.0      0.0   72.0     9.17   \n",
       "147 NaN  ...   3.0      30.0   0.0  0.0  0.0  0.0      0.0   18.0    10.00   \n",
       "148 NaN  ...   4.0      42.0   0.0  0.0  0.0  0.0      0.0   24.0    10.50   \n",
       "149 NaN  ...   4.0      51.0   0.0  0.0  0.0  0.0      0.0   24.0    12.75   \n",
       "\n",
       "     Bow_SR  \n",
       "145     0.0  \n",
       "146     0.0  \n",
       "147     0.0  \n",
       "148     0.0  \n",
       "149     0.0  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer_1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer = pd.merge(alls, df_outer_1, on='PLAYER', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(166, 36)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'PLAYER', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings', 'Bat_POS', 'Bat_Mat', 'Bat_Inns',\n",
       "       'NO', 'Bat_Runs', 'HS', 'BF', '100', '50', '4s', '6s', 'Bat_Avg',\n",
       "       'Bat_SR', 'Bow_POS', 'Bow_Mat', 'Bow_Inns', 'Ov', 'Bow_Runs', 'Wkts',\n",
       "       'BBI', '4w', '5w', 'Bow_Avg', 'Balls', 'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.14 Checking data quality issues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.14.1 Duplicate records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(166, 36)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer_tmp = df_outer.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(166, 36)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer_tmp.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.14.2 Missing values check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>PLAYER</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>Wkts</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    alls_POS  PLAYER    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  \\\n",
       "0      False   False  False     False      False  False    False    False   \n",
       "1      False   False  False     False      False  False    False    False   \n",
       "2      False   False  False     False      False  False    False    False   \n",
       "3      False   False  False     False      False  False    False    False   \n",
       "4      False   False  False     False      False  False    False    False   \n",
       "5      False   False  False     False      False  False    False    False   \n",
       "6      False   False  False     False      False  False    False    False   \n",
       "7      False   False  False     False      False  False    False    False   \n",
       "8      False   False  False     False      False  False    False    False   \n",
       "9      False   False  False     False      False  False    False    False   \n",
       "10     False   False  False     False      False  False    False    False   \n",
       "11     False   False  False     False      False  False    False    False   \n",
       "12     False   False  False     False      False  False    False    False   \n",
       "13     False   False  False     False      False  False    False    False   \n",
       "14     False   False  False     False      False  False    False    False   \n",
       "15     False   False  False     False      False  False    False    False   \n",
       "16     False   False  False     False      False  False    False    False   \n",
       "17     False   False  False     False      False  False    False    False   \n",
       "18     False   False  False     False      False  False    False    False   \n",
       "19     False   False  False     False      False  False    False    False   \n",
       "\n",
       "    Catches  Stumpings  ...     Ov  Bow_Runs   Wkts    BBI     4w     5w  \\\n",
       "0     False      False  ...   True      True   True   True   True   True   \n",
       "1     False      False  ...  False     False  False  False  False  False   \n",
       "2     False      False  ...  False     False  False  False  False  False   \n",
       "3     False      False  ...   True      True   True   True   True   True   \n",
       "4     False      False  ...   True      True   True   True   True   True   \n",
       "5     False      False  ...  False     False  False  False  False  False   \n",
       "6     False      False  ...   True      True   True   True   True   True   \n",
       "7     False      False  ...  False     False  False  False  False  False   \n",
       "8     False      False  ...  False     False  False  False  False  False   \n",
       "9     False      False  ...   True      True   True   True   True   True   \n",
       "10    False      False  ...   True      True   True   True   True   True   \n",
       "11    False      False  ...  False     False  False  False  False  False   \n",
       "12    False      False  ...   True      True   True   True   True   True   \n",
       "13    False      False  ...  False     False  False  False  False  False   \n",
       "14    False      False  ...  False     False  False  False  False  False   \n",
       "15    False      False  ...   True      True   True   True   True   True   \n",
       "16    False      False  ...  False     False  False  False  False  False   \n",
       "17    False      False  ...   True      True   True   True   True   True   \n",
       "18    False      False  ...  False     False  False  False  False  False   \n",
       "19    False      False  ...  False     False  False  False  False  False   \n",
       "\n",
       "    Bow_Avg  Balls  economy  Bow_SR  \n",
       "0      True   True     True    True  \n",
       "1     False  False    False   False  \n",
       "2     False  False    False   False  \n",
       "3      True   True     True    True  \n",
       "4      True   True     True    True  \n",
       "5     False  False    False   False  \n",
       "6      True   True     True    True  \n",
       "7     False  False    False   False  \n",
       "8     False  False    False   False  \n",
       "9      True   True     True    True  \n",
       "10     True   True     True    True  \n",
       "11    False  False    False   False  \n",
       "12     True   True     True    True  \n",
       "13    False  False    False   False  \n",
       "14    False  False    False   False  \n",
       "15     True   True     True    True  \n",
       "16    False  False    False   False  \n",
       "17     True   True     True    True  \n",
       "18    False  False    False   False  \n",
       "19    False  False    False   False  \n",
       "\n",
       "[20 rows x 36 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_missing = df_outer.isnull()\n",
    "df_missing.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "alls_POS      4\n",
       "PLAYER        0\n",
       "Pts           5\n",
       "alls_Mat      5\n",
       "alls_Wkts     5\n",
       "Dots          5\n",
       "alls_4s       5\n",
       "alls_6s       5\n",
       "Catches       5\n",
       "Stumpings     5\n",
       "Bat_POS      66\n",
       "Bat_Mat      66\n",
       "Bat_Inns     66\n",
       "NO           66\n",
       "Bat_Runs     66\n",
       "HS           66\n",
       "BF           66\n",
       "100          66\n",
       "50           66\n",
       "4s           66\n",
       "6s           66\n",
       "Bat_Avg      66\n",
       "Bat_SR       66\n",
       "Bow_POS      66\n",
       "Bow_Mat      66\n",
       "Bow_Inns     66\n",
       "Ov           66\n",
       "Bow_Runs     66\n",
       "Wkts         66\n",
       "BBI          66\n",
       "4w           66\n",
       "5w           66\n",
       "Bow_Avg      66\n",
       "Balls        66\n",
       "economy      66\n",
       "Bow_SR       66\n",
       "dtype: int64"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alls_POS\n",
      "False    162\n",
      "True       4\n",
      "Name: alls_POS, dtype: int64\n",
      "\n",
      "PLAYER\n",
      "False    166\n",
      "Name: PLAYER, dtype: int64\n",
      "\n",
      "Pts\n",
      "False    161\n",
      "True       5\n",
      "Name: Pts, dtype: int64\n",
      "\n",
      "alls_Mat\n",
      "False    161\n",
      "True       5\n",
      "Name: alls_Mat, dtype: int64\n",
      "\n",
      "alls_Wkts\n",
      "False    161\n",
      "True       5\n",
      "Name: alls_Wkts, dtype: int64\n",
      "\n",
      "Dots\n",
      "False    161\n",
      "True       5\n",
      "Name: Dots, dtype: int64\n",
      "\n",
      "alls_4s\n",
      "False    161\n",
      "True       5\n",
      "Name: alls_4s, dtype: int64\n",
      "\n",
      "alls_6s\n",
      "False    161\n",
      "True       5\n",
      "Name: alls_6s, dtype: int64\n",
      "\n",
      "Catches\n",
      "False    161\n",
      "True       5\n",
      "Name: Catches, dtype: int64\n",
      "\n",
      "Stumpings\n",
      "False    161\n",
      "True       5\n",
      "Name: Stumpings, dtype: int64\n",
      "\n",
      "Bat_POS\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_POS, dtype: int64\n",
      "\n",
      "Bat_Mat\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_Mat, dtype: int64\n",
      "\n",
      "Bat_Inns\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_Inns, dtype: int64\n",
      "\n",
      "NO\n",
      "False    100\n",
      "True      66\n",
      "Name: NO, dtype: int64\n",
      "\n",
      "Bat_Runs\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_Runs, dtype: int64\n",
      "\n",
      "HS\n",
      "False    100\n",
      "True      66\n",
      "Name: HS, dtype: int64\n",
      "\n",
      "BF\n",
      "False    100\n",
      "True      66\n",
      "Name: BF, dtype: int64\n",
      "\n",
      "100\n",
      "False    100\n",
      "True      66\n",
      "Name: 100, dtype: int64\n",
      "\n",
      "50\n",
      "False    100\n",
      "True      66\n",
      "Name: 50, dtype: int64\n",
      "\n",
      "4s\n",
      "False    100\n",
      "True      66\n",
      "Name: 4s, dtype: int64\n",
      "\n",
      "6s\n",
      "False    100\n",
      "True      66\n",
      "Name: 6s, dtype: int64\n",
      "\n",
      "Bat_Avg\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_Avg, dtype: int64\n",
      "\n",
      "Bat_SR\n",
      "False    100\n",
      "True      66\n",
      "Name: Bat_SR, dtype: int64\n",
      "\n",
      "Bow_POS\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_POS, dtype: int64\n",
      "\n",
      "Bow_Mat\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_Mat, dtype: int64\n",
      "\n",
      "Bow_Inns\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_Inns, dtype: int64\n",
      "\n",
      "Ov\n",
      "False    100\n",
      "True      66\n",
      "Name: Ov, dtype: int64\n",
      "\n",
      "Bow_Runs\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_Runs, dtype: int64\n",
      "\n",
      "Wkts\n",
      "False    100\n",
      "True      66\n",
      "Name: Wkts, dtype: int64\n",
      "\n",
      "BBI\n",
      "False    100\n",
      "True      66\n",
      "Name: BBI, dtype: int64\n",
      "\n",
      "4w\n",
      "False    100\n",
      "True      66\n",
      "Name: 4w, dtype: int64\n",
      "\n",
      "5w\n",
      "False    100\n",
      "True      66\n",
      "Name: 5w, dtype: int64\n",
      "\n",
      "Bow_Avg\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_Avg, dtype: int64\n",
      "\n",
      "Balls\n",
      "False    100\n",
      "True      66\n",
      "Name: Balls, dtype: int64\n",
      "\n",
      "economy\n",
      "False    100\n",
      "True      66\n",
      "Name: economy, dtype: int64\n",
      "\n",
      "Bow_SR\n",
      "False    100\n",
      "True      66\n",
      "Name: Bow_SR, dtype: int64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for column in df_missing.columns.values.tolist():\n",
    "    print(column)\n",
    "    print (df_missing[column].value_counts())\n",
    "    print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer.replace(np.nan, 0, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "alls_POS     0\n",
       "PLAYER       0\n",
       "Pts          0\n",
       "alls_Mat     0\n",
       "alls_Wkts    0\n",
       "Dots         0\n",
       "alls_4s      0\n",
       "alls_6s      0\n",
       "Catches      0\n",
       "Stumpings    0\n",
       "Bat_POS      0\n",
       "Bat_Mat      0\n",
       "Bat_Inns     0\n",
       "NO           0\n",
       "Bat_Runs     0\n",
       "HS           0\n",
       "BF           0\n",
       "100          0\n",
       "50           0\n",
       "4s           0\n",
       "6s           0\n",
       "Bat_Avg      0\n",
       "Bat_SR       0\n",
       "Bow_POS      0\n",
       "Bow_Mat      0\n",
       "Bow_Inns     0\n",
       "Ov           0\n",
       "Bow_Runs     0\n",
       "Wkts         0\n",
       "BBI          0\n",
       "4w           0\n",
       "5w           0\n",
       "Bow_Avg      0\n",
       "Balls        0\n",
       "economy      0\n",
       "Bow_SR       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.14.3 Infinity values replacement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer = df_outer.replace([np.inf, -np.inf], 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.15 Dropping redundant / unnecessary columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer.drop([\"Bat_Mat\", '4s', '6s', 'Bow_Mat', 'Wkts'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer.drop([\"PLAYER\"], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings', 'Bat_POS', 'Bat_Inns', 'NO',\n",
       "       'Bat_Runs', 'HS', 'BF', '100', '50', 'Bat_Avg', 'Bat_SR', 'Bow_POS',\n",
       "       'Bow_Inns', 'Ov', 'Bow_Runs', 'BBI', '4w', '5w', 'Bow_Avg', 'Balls',\n",
       "       'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.16 Set dataframe wide properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer = df_outer.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.17 Exporting the cleaned dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer.to_csv(\"clean_df.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.18 Applying filters on the dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.18.1 Using the single filter conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings', 'Bat_POS', 'Bat_Inns', 'NO',\n",
       "       'Bat_Runs', 'HS', 'BF', '100', '50', 'Bat_Avg', 'Bat_SR', 'Bow_POS',\n",
       "       'Bow_Inns', 'Ov', 'Bow_Runs', 'BBI', '4w', '5w', 'Bow_Avg', 'Balls',\n",
       "       'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Bow_Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>274.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.91</td>\n",
       "      <td>387.0</td>\n",
       "      <td>7.47</td>\n",
       "      <td>17.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.18</td>\n",
       "      <td>360.0</td>\n",
       "      <td>6.28</td>\n",
       "      <td>21.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8.0</td>\n",
       "      <td>240.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>61.4</td>\n",
       "      <td>409.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.53</td>\n",
       "      <td>370.0</td>\n",
       "      <td>6.63</td>\n",
       "      <td>19.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.0</td>\n",
       "      <td>234.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>343.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.87</td>\n",
       "      <td>324.0</td>\n",
       "      <td>6.35</td>\n",
       "      <td>21.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>461.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.46</td>\n",
       "      <td>354.0</td>\n",
       "      <td>7.81</td>\n",
       "      <td>27.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>368.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.72</td>\n",
       "      <td>282.0</td>\n",
       "      <td>7.83</td>\n",
       "      <td>11.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15.0</td>\n",
       "      <td>213.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>347.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.35</td>\n",
       "      <td>288.0</td>\n",
       "      <td>7.23</td>\n",
       "      <td>14.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>335.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.92</td>\n",
       "      <td>276.0</td>\n",
       "      <td>7.28</td>\n",
       "      <td>23.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>44.2</td>\n",
       "      <td>347.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.70</td>\n",
       "      <td>266.0</td>\n",
       "      <td>7.83</td>\n",
       "      <td>26.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.40</td>\n",
       "      <td>306.0</td>\n",
       "      <td>7.14</td>\n",
       "      <td>30.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>291.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.45</td>\n",
       "      <td>258.0</td>\n",
       "      <td>6.77</td>\n",
       "      <td>23.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24.0</td>\n",
       "      <td>187.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>49.2</td>\n",
       "      <td>386.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.44</td>\n",
       "      <td>296.0</td>\n",
       "      <td>7.82</td>\n",
       "      <td>16.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>397.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.09</td>\n",
       "      <td>288.0</td>\n",
       "      <td>8.27</td>\n",
       "      <td>26.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.17</td>\n",
       "      <td>150.0</td>\n",
       "      <td>6.76</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>312.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.50</td>\n",
       "      <td>264.0</td>\n",
       "      <td>7.09</td>\n",
       "      <td>16.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>308.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.69</td>\n",
       "      <td>282.0</td>\n",
       "      <td>6.55</td>\n",
       "      <td>21.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31.0</td>\n",
       "      <td>180.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.67</td>\n",
       "      <td>330.0</td>\n",
       "      <td>7.27</td>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.85</td>\n",
       "      <td>276.0</td>\n",
       "      <td>7.59</td>\n",
       "      <td>21.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44.0</td>\n",
       "      <td>156.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>29.1</td>\n",
       "      <td>194.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.25</td>\n",
       "      <td>175.0</td>\n",
       "      <td>6.65</td>\n",
       "      <td>21.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45.0</td>\n",
       "      <td>153.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>34.5</td>\n",
       "      <td>287.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.11</td>\n",
       "      <td>209.0</td>\n",
       "      <td>8.24</td>\n",
       "      <td>11.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46.0</td>\n",
       "      <td>151.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>44.3</td>\n",
       "      <td>399.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.90</td>\n",
       "      <td>267.0</td>\n",
       "      <td>8.97</td>\n",
       "      <td>26.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47.0</td>\n",
       "      <td>150.5</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>41.1</td>\n",
       "      <td>330.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.00</td>\n",
       "      <td>247.0</td>\n",
       "      <td>8.02</td>\n",
       "      <td>22.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48.0</td>\n",
       "      <td>149.5</td>\n",
       "      <td>12.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>44.5</td>\n",
       "      <td>438.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.38</td>\n",
       "      <td>269.0</td>\n",
       "      <td>9.77</td>\n",
       "      <td>16.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.30</td>\n",
       "      <td>198.0</td>\n",
       "      <td>9.79</td>\n",
       "      <td>19.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>37.5</td>\n",
       "      <td>371.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.38</td>\n",
       "      <td>227.0</td>\n",
       "      <td>9.81</td>\n",
       "      <td>28.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>306.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.54</td>\n",
       "      <td>198.0</td>\n",
       "      <td>9.27</td>\n",
       "      <td>15.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.55</td>\n",
       "      <td>240.0</td>\n",
       "      <td>6.75</td>\n",
       "      <td>21.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>42.4</td>\n",
       "      <td>352.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.33</td>\n",
       "      <td>256.0</td>\n",
       "      <td>8.25</td>\n",
       "      <td>21.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.2</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94.25</td>\n",
       "      <td>242.0</td>\n",
       "      <td>9.35</td>\n",
       "      <td>60.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>335.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.83</td>\n",
       "      <td>210.0</td>\n",
       "      <td>9.57</td>\n",
       "      <td>35.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>65.0</td>\n",
       "      <td>111.5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>281.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.12</td>\n",
       "      <td>180.0</td>\n",
       "      <td>9.37</td>\n",
       "      <td>22.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>67.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>237.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.33</td>\n",
       "      <td>163.0</td>\n",
       "      <td>8.72</td>\n",
       "      <td>18.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>68.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>37.2</td>\n",
       "      <td>398.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.80</td>\n",
       "      <td>224.0</td>\n",
       "      <td>10.66</td>\n",
       "      <td>22.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>69.0</td>\n",
       "      <td>98.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>28.1</td>\n",
       "      <td>269.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.43</td>\n",
       "      <td>169.0</td>\n",
       "      <td>9.55</td>\n",
       "      <td>24.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>72.0</td>\n",
       "      <td>93.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>16.5</td>\n",
       "      <td>189.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31.50</td>\n",
       "      <td>101.0</td>\n",
       "      <td>11.23</td>\n",
       "      <td>16.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>75.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51.00</td>\n",
       "      <td>204.0</td>\n",
       "      <td>7.50</td>\n",
       "      <td>40.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>76.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>138.0</td>\n",
       "      <td>9.13</td>\n",
       "      <td>17.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>77.0</td>\n",
       "      <td>79.5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.33</td>\n",
       "      <td>162.0</td>\n",
       "      <td>8.96</td>\n",
       "      <td>27.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>78.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.50</td>\n",
       "      <td>198.0</td>\n",
       "      <td>8.67</td>\n",
       "      <td>49.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>80.0</td>\n",
       "      <td>75.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>238.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.00</td>\n",
       "      <td>162.0</td>\n",
       "      <td>8.81</td>\n",
       "      <td>23.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>81.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31.71</td>\n",
       "      <td>138.0</td>\n",
       "      <td>9.65</td>\n",
       "      <td>19.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>82.0</td>\n",
       "      <td>71.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.00</td>\n",
       "      <td>114.0</td>\n",
       "      <td>8.68</td>\n",
       "      <td>22.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>83.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.60</td>\n",
       "      <td>114.0</td>\n",
       "      <td>8.58</td>\n",
       "      <td>22.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>86.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.50</td>\n",
       "      <td>84.0</td>\n",
       "      <td>6.71</td>\n",
       "      <td>21.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>90.0</td>\n",
       "      <td>53.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>87.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14.50</td>\n",
       "      <td>52.0</td>\n",
       "      <td>10.04</td>\n",
       "      <td>8.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>103.0</td>\n",
       "      <td>44.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.00</td>\n",
       "      <td>72.0</td>\n",
       "      <td>9.67</td>\n",
       "      <td>18.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>105.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.80</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7.90</td>\n",
       "      <td>12.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>107.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.50</td>\n",
       "      <td>54.0</td>\n",
       "      <td>8.22</td>\n",
       "      <td>13.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>115.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.25</td>\n",
       "      <td>48.0</td>\n",
       "      <td>8.62</td>\n",
       "      <td>12.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>118.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.75</td>\n",
       "      <td>43.0</td>\n",
       "      <td>9.35</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>54 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     alls_POS    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  Catches  \\\n",
       "0         1.0  369.0      14.0       11.0   61.0     31.0     52.0      4.0   \n",
       "1         2.0  342.0      16.0       14.0   94.0     28.0     29.0     11.0   \n",
       "2         3.0  274.5      17.0       22.0  190.0      1.0      0.0      2.0   \n",
       "3         4.0  255.0      17.0       26.0  149.0      0.0      0.0      6.0   \n",
       "5         6.0  247.5      15.0       17.0  166.0      2.0      2.0      4.0   \n",
       "7         8.0  240.5      16.0       19.0  169.0      0.0      0.0      2.0   \n",
       "8         9.0  234.5      16.0       15.0  128.0      7.0      4.0      9.0   \n",
       "11       12.0  226.0      15.0       13.0  168.0      1.0      0.0      4.0   \n",
       "13       14.0  219.0      12.0       25.0  113.0      0.0      1.0      6.0   \n",
       "14       15.0  213.0      14.0       20.0  107.0      8.0      1.0      5.0   \n",
       "16       17.0  211.0      16.0       12.0   94.0     18.0      5.0      5.0   \n",
       "18       19.0  205.0      12.0       10.0   96.0     17.0      9.0      0.0   \n",
       "19       20.0  203.0      14.0       10.0  110.0     10.0      3.0      9.0   \n",
       "20       21.0  198.0      14.0       19.0  119.0      0.0      0.0      5.0   \n",
       "21       22.0  191.0      11.0       11.0  121.0      4.0      4.0      3.0   \n",
       "23       24.0  187.5      14.0       18.0  117.0      0.0      0.0      3.0   \n",
       "24       25.0  187.0      13.0       11.0  141.0      0.0      0.0      3.0   \n",
       "25       26.0  186.0      11.0        6.0   63.0     16.0     17.0      1.0   \n",
       "27       28.0  183.0      11.0       16.0  117.0      0.0      0.0      4.0   \n",
       "28       29.0  183.0      13.0       13.0  125.0      2.0      0.0      3.0   \n",
       "30       31.0  180.5      14.0       15.0  100.0      3.0      3.0      4.0   \n",
       "31       32.0  176.0      13.0       13.0  122.0      1.0      1.0      1.0   \n",
       "43       44.0  156.5       8.0        8.0   69.0      8.0      7.0      6.0   \n",
       "44       45.0  153.5       9.0       19.0   87.0      0.0      0.0      0.0   \n",
       "45       46.0  151.5      13.0       10.0   87.0      4.0      2.0      5.0   \n",
       "46       47.0  150.5      12.0       11.0   74.0      6.0      3.0      5.0   \n",
       "47       48.0  149.5      12.0       16.0   91.0      0.0      0.0      1.0   \n",
       "49       50.0  143.0       9.0       10.0   60.0     13.0      3.0      2.0   \n",
       "50       51.0  137.0      11.0        8.0   88.0      3.0      1.0      4.0   \n",
       "51       52.0  133.0       9.0       13.0   68.0      1.0      2.0      4.0   \n",
       "54       55.0  129.0      11.0       11.0   83.0      2.0      0.0      1.0   \n",
       "55       56.0  129.0      11.0       12.0   82.0      1.0      0.0      1.0   \n",
       "60       61.0  114.0      11.0        4.0   95.0      0.0      0.0      2.0   \n",
       "62       63.0  113.0      10.0        6.0   77.0      1.0      0.0      5.0   \n",
       "64       65.0  111.5      10.0        8.0   65.0      1.0      1.0      5.0   \n",
       "66       67.0  104.0       8.0        9.0   54.0      1.0      1.0      5.0   \n",
       "67       68.0  103.0      11.0       10.0   58.0      0.0      0.0      4.0   \n",
       "68       69.0   98.5       9.0        7.0   69.0      0.0      0.0      2.0   \n",
       "71       72.0   93.5       9.0        6.0   31.0      8.0      4.0      3.0   \n",
       "74       75.0   84.0      10.0        5.0   59.0      0.0      0.0      3.0   \n",
       "75       76.0   80.0       6.0        8.0   47.0      0.0      0.0      2.0   \n",
       "76       77.0   79.5       7.0        6.0   56.0      0.0      0.0      1.0   \n",
       "77       78.0   78.0       9.0        4.0   54.0      1.0      0.0      3.0   \n",
       "79       80.0   75.5       8.0        7.0   51.0      0.0      0.0      0.0   \n",
       "80       81.0   74.0       6.0        7.0   47.0      0.0      0.0      1.0   \n",
       "81       82.0   71.5       5.0        5.0   54.0      0.0      0.0      0.0   \n",
       "82       83.0   70.0       5.0        5.0   44.0      0.0      1.0      2.0   \n",
       "85       86.0   64.0       4.0        4.0   37.0      0.0      3.0      1.0   \n",
       "89       90.0   53.5       3.0        6.0   25.0      2.0      0.0      1.0   \n",
       "102     103.0   44.5       5.0        4.0   28.0      0.0      0.0      1.0   \n",
       "104     105.0   42.0       4.0        5.0   22.0      0.0      0.0      1.0   \n",
       "106     107.0   40.0       3.0        4.0   21.0      0.0      0.0      2.0   \n",
       "114     115.0   34.0       2.0        4.0   20.0      0.0      0.0      0.0   \n",
       "117     118.0   29.0       2.0        4.0   15.0      0.0      0.0      0.0   \n",
       "\n",
       "     Stumpings  Bat_POS  ...  Bow_Inns    Ov  Bow_Runs  BBI   4w   5w  \\\n",
       "0          0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0   \n",
       "1          0.0     16.0  ...      16.0  42.3     390.0  0.0  0.0  0.0   \n",
       "2          0.0      0.0  ...      17.0  64.3     482.0  0.0  0.0  0.0   \n",
       "3          0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0   \n",
       "5          0.0     76.0  ...      15.0  60.0     377.0  0.0  0.0  0.0   \n",
       "7          0.0      0.0  ...      16.0  61.4     409.0  0.0  0.0  0.0   \n",
       "8          0.0     51.0  ...      16.0  54.0     343.0  0.0  0.0  0.0   \n",
       "11         0.0     92.0  ...      15.0  59.0     461.0  0.0  0.0  0.0   \n",
       "13         0.0     91.0  ...      12.0  47.0     368.0  0.0  2.0  0.0   \n",
       "14         0.0     67.0  ...      14.0  48.0     347.0  0.0  0.0  0.0   \n",
       "16         0.0     39.0  ...      16.0  46.0     335.0  0.0  0.0  0.0   \n",
       "18         0.0     46.0  ...      12.0  44.2     347.0  0.0  0.0  0.0   \n",
       "19         0.0     50.0  ...      14.0  51.0     364.0  0.0  0.0  0.0   \n",
       "20         0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0   \n",
       "21         0.0     64.0  ...      11.0  43.0     291.0  0.0  0.0  0.0   \n",
       "23         0.0      0.0  ...      14.0  49.2     386.0  0.0  1.0  0.0   \n",
       "24         0.0      0.0  ...      13.0  48.0     397.0  0.0  0.0  0.0   \n",
       "25         0.0     35.0  ...       9.0  25.0     169.0  0.0  0.0  0.0   \n",
       "27         0.0      0.0  ...      11.0  44.0     312.0  0.0  0.0  0.0   \n",
       "28         0.0     94.0  ...      13.0  47.0     308.0  0.0  0.0  0.0   \n",
       "30         0.0     72.0  ...      14.0  55.0     400.0  0.0  0.0  0.0   \n",
       "31         0.0     97.0  ...      13.0  46.0     349.0  0.0  0.0  0.0   \n",
       "43         0.0     49.0  ...       8.0  29.1     194.0  0.0  1.0  0.0   \n",
       "44         0.0      0.0  ...       9.0  34.5     287.0  0.0  0.0  0.0   \n",
       "45         0.0     71.0  ...      13.0  44.3     399.0  0.0  0.0  0.0   \n",
       "46         0.0     60.0  ...      12.0  41.1     330.0  0.0  0.0  0.0   \n",
       "47         0.0      0.0  ...      12.0  44.5     438.0  0.0  2.0  0.0   \n",
       "49         0.0     55.0  ...       9.0  33.0     323.0  0.0  1.0  0.0   \n",
       "50         0.0     80.0  ...      11.0  37.5     371.0  0.0  0.0  0.0   \n",
       "51         0.0     77.0  ...       9.0  33.0     306.0  0.0  0.0  0.0   \n",
       "54         0.0     81.0  ...      11.0  40.0     270.0  0.0  0.0  0.0   \n",
       "55         0.0      0.0  ...      11.0  42.4     352.0  0.0  0.0  0.0   \n",
       "60         0.0      0.0  ...      11.0  40.2     377.0  0.0  0.0  0.0   \n",
       "62         0.0      0.0  ...      10.0  35.0     335.0  0.0  0.0  0.0   \n",
       "64         0.0     90.0  ...       9.0  30.0     281.0  0.0  0.0  0.0   \n",
       "66         0.0     84.0  ...       8.0  27.1     237.0  0.0  0.0  0.0   \n",
       "67         0.0      0.0  ...      11.0  37.2     398.0  0.0  0.0  0.0   \n",
       "68         0.0      0.0  ...       9.0  28.1     269.0  0.0  0.0  0.0   \n",
       "71         0.0     48.0  ...       6.0  16.5     189.0  0.0  0.0  0.0   \n",
       "74         0.0      0.0  ...      10.0  34.0     255.0  0.0  0.0  0.0   \n",
       "75         0.0      0.0  ...       6.0  23.0     210.0  0.0  0.0  0.0   \n",
       "76         0.0      0.0  ...       7.0  27.0     242.0  0.0  0.0  0.0   \n",
       "77         0.0     93.0  ...       9.0  33.0     286.0  0.0  0.0  0.0   \n",
       "79         0.0      0.0  ...       8.0  27.0     238.0  0.0  0.0  0.0   \n",
       "80         0.0      0.0  ...       6.0  23.0     222.0  0.0  0.0  0.0   \n",
       "81         0.0      0.0  ...       5.0  19.0     165.0  0.0  0.0  0.0   \n",
       "82         0.0      0.0  ...       5.0  19.0     163.0  0.0  0.0  0.0   \n",
       "85         0.0     78.0  ...       4.0  14.0      94.0  0.0  0.0  0.0   \n",
       "89         0.0     88.0  ...       3.0   8.4      87.0  0.0  0.0  1.0   \n",
       "102        0.0      0.0  ...       5.0  12.0     116.0  0.0  0.0  0.0   \n",
       "104        0.0      0.0  ...       4.0  10.0      79.0  0.0  0.0  0.0   \n",
       "106        0.0      0.0  ...       3.0   9.0      74.0  0.0  0.0  0.0   \n",
       "114        0.0      0.0  ...       2.0   8.0      69.0  0.0  0.0  0.0   \n",
       "117        0.0      0.0  ...       2.0   7.1      67.0  0.0  0.0  0.0   \n",
       "\n",
       "     Bow_Avg  Balls  economy  Bow_SR  \n",
       "0       0.00    0.0     0.00    0.00  \n",
       "1      27.86  255.0     9.18   18.21  \n",
       "2      21.91  387.0     7.47   17.59  \n",
       "3       0.00    0.0     0.00    0.00  \n",
       "5      22.18  360.0     6.28   21.18  \n",
       "7      21.53  370.0     6.63   19.47  \n",
       "8      22.87  324.0     6.35   21.60  \n",
       "11     35.46  354.0     7.81   27.23  \n",
       "13     14.72  282.0     7.83   11.28  \n",
       "14     17.35  288.0     7.23   14.40  \n",
       "16     27.92  276.0     7.28   23.00  \n",
       "18     34.70  266.0     7.83   26.60  \n",
       "19     36.40  306.0     7.14   30.60  \n",
       "20      0.00    0.0     0.00    0.00  \n",
       "21     26.45  258.0     6.77   23.45  \n",
       "23     21.44  296.0     7.82   16.44  \n",
       "24     36.09  288.0     8.27   26.18  \n",
       "25     28.17  150.0     6.76   25.00  \n",
       "27     19.50  264.0     7.09   16.50  \n",
       "28     23.69  282.0     6.55   21.69  \n",
       "30     26.67  330.0     7.27   22.00  \n",
       "31     26.85  276.0     7.59   21.23  \n",
       "43     24.25  175.0     6.65   21.88  \n",
       "44     15.11  209.0     8.24   11.00  \n",
       "45     39.90  267.0     8.97   26.70  \n",
       "46     30.00  247.0     8.02   22.45  \n",
       "47     27.38  269.0     9.77   16.81  \n",
       "49     32.30  198.0     9.79   19.80  \n",
       "50     46.38  227.0     9.81   28.38  \n",
       "51     23.54  198.0     9.27   15.23  \n",
       "54     24.55  240.0     6.75   21.82  \n",
       "55     29.33  256.0     8.25   21.33  \n",
       "60     94.25  242.0     9.35   60.50  \n",
       "62     55.83  210.0     9.57   35.00  \n",
       "64     35.12  180.0     9.37   22.50  \n",
       "66     26.33  163.0     8.72   18.11  \n",
       "67     39.80  224.0    10.66   22.40  \n",
       "68     38.43  169.0     9.55   24.14  \n",
       "71     31.50  101.0    11.23   16.83  \n",
       "74     51.00  204.0     7.50   40.80  \n",
       "75     26.25  138.0     9.13   17.25  \n",
       "76     40.33  162.0     8.96   27.00  \n",
       "77     71.50  198.0     8.67   49.50  \n",
       "79     34.00  162.0     8.81   23.14  \n",
       "80     31.71  138.0     9.65   19.71  \n",
       "81     33.00  114.0     8.68   22.80  \n",
       "82     32.60  114.0     8.58   22.80  \n",
       "85     23.50   84.0     6.71   21.00  \n",
       "89     14.50   52.0    10.04    8.67  \n",
       "102    29.00   72.0     9.67   18.00  \n",
       "104    15.80   60.0     7.90   12.00  \n",
       "106    18.50   54.0     8.22   13.50  \n",
       "114    17.25   48.0     8.62   12.00  \n",
       "117    16.75   43.0     9.35   10.75  \n",
       "\n",
       "[54 rows x 30 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer[df_outer['alls_Wkts'] > 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Bow_Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>274.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.91</td>\n",
       "      <td>387.0</td>\n",
       "      <td>7.47</td>\n",
       "      <td>17.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.18</td>\n",
       "      <td>360.0</td>\n",
       "      <td>6.28</td>\n",
       "      <td>21.18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   alls_POS    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  Catches  \\\n",
       "0       1.0  369.0      14.0       11.0   61.0     31.0     52.0      4.0   \n",
       "1       2.0  342.0      16.0       14.0   94.0     28.0     29.0     11.0   \n",
       "2       3.0  274.5      17.0       22.0  190.0      1.0      0.0      2.0   \n",
       "3       4.0  255.0      17.0       26.0  149.0      0.0      0.0      6.0   \n",
       "5       6.0  247.5      15.0       17.0  166.0      2.0      2.0      4.0   \n",
       "\n",
       "   Stumpings  Bat_POS  ...  Bow_Inns    Ov  Bow_Runs  BBI   4w   5w  Bow_Avg  \\\n",
       "0        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "1        0.0     16.0  ...      16.0  42.3     390.0  0.0  0.0  0.0    27.86   \n",
       "2        0.0      0.0  ...      17.0  64.3     482.0  0.0  0.0  0.0    21.91   \n",
       "3        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "5        0.0     76.0  ...      15.0  60.0     377.0  0.0  0.0  0.0    22.18   \n",
       "\n",
       "   Balls  economy  Bow_SR  \n",
       "0    0.0     0.00    0.00  \n",
       "1  255.0     9.18   18.21  \n",
       "2  387.0     7.47   17.59  \n",
       "3    0.0     0.00    0.00  \n",
       "5  360.0     6.28   21.18  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer[df_outer['alls_Wkts'] > 3].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Wkts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>369.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>342.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>274.5</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>255.0</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>247.5</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pts  alls_Wkts\n",
       "0  369.0       11.0\n",
       "1  342.0       14.0\n",
       "2  274.5       22.0\n",
       "3  255.0       26.0\n",
       "5  247.5       17.0"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer[df_outer['alls_Wkts'] > 3][['Pts', 'alls_Wkts']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.18.2 Using the multiple filter conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Bow_Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>274.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.91</td>\n",
       "      <td>387.0</td>\n",
       "      <td>7.47</td>\n",
       "      <td>17.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.18</td>\n",
       "      <td>360.0</td>\n",
       "      <td>6.28</td>\n",
       "      <td>21.18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   alls_POS    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  Catches  \\\n",
       "0       1.0  369.0      14.0       11.0   61.0     31.0     52.0      4.0   \n",
       "1       2.0  342.0      16.0       14.0   94.0     28.0     29.0     11.0   \n",
       "2       3.0  274.5      17.0       22.0  190.0      1.0      0.0      2.0   \n",
       "3       4.0  255.0      17.0       26.0  149.0      0.0      0.0      6.0   \n",
       "5       6.0  247.5      15.0       17.0  166.0      2.0      2.0      4.0   \n",
       "\n",
       "   Stumpings  Bat_POS  ...  Bow_Inns    Ov  Bow_Runs  BBI   4w   5w  Bow_Avg  \\\n",
       "0        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "1        0.0     16.0  ...      16.0  42.3     390.0  0.0  0.0  0.0    27.86   \n",
       "2        0.0      0.0  ...      17.0  64.3     482.0  0.0  0.0  0.0    21.91   \n",
       "3        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "5        0.0     76.0  ...      15.0  60.0     377.0  0.0  0.0  0.0    22.18   \n",
       "\n",
       "   Balls  economy  Bow_SR  \n",
       "0    0.0     0.00    0.00  \n",
       "1  255.0     9.18   18.21  \n",
       "2  387.0     7.47   17.59  \n",
       "3    0.0     0.00    0.00  \n",
       "5  360.0     6.28   21.18  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df_outer[(df_outer['alls_Wkts'] >= 3) & (df_outer['Pts'] > 100)]\n",
    "filtered_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Bow_Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>274.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.91</td>\n",
       "      <td>387.0</td>\n",
       "      <td>7.47</td>\n",
       "      <td>17.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   alls_POS    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  Catches  \\\n",
       "0       1.0  369.0      14.0       11.0   61.0     31.0     52.0      4.0   \n",
       "1       2.0  342.0      16.0       14.0   94.0     28.0     29.0     11.0   \n",
       "2       3.0  274.5      17.0       22.0  190.0      1.0      0.0      2.0   \n",
       "3       4.0  255.0      17.0       26.0  149.0      0.0      0.0      6.0   \n",
       "4       5.0  247.5      16.0        0.0    0.0     45.0     25.0     17.0   \n",
       "\n",
       "   Stumpings  Bat_POS  ...  Bow_Inns    Ov  Bow_Runs  BBI   4w   5w  Bow_Avg  \\\n",
       "0        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "1        0.0     16.0  ...      16.0  42.3     390.0  0.0  0.0  0.0    27.86   \n",
       "2        0.0      0.0  ...      17.0  64.3     482.0  0.0  0.0  0.0    21.91   \n",
       "3        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "4        2.0      3.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "\n",
       "   Balls  economy  Bow_SR  \n",
       "0    0.0     0.00    0.00  \n",
       "1  255.0     9.18   18.21  \n",
       "2  387.0     7.47   17.59  \n",
       "3    0.0     0.00    0.00  \n",
       "4    0.0     0.00    0.00  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df_outer[(df_outer['alls_Wkts'] >= 3) | (df_outer['Pts'] > 100)]\n",
    "filtered_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>1.18.3 Using the query method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Bow_Inns</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>369.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>42.3</td>\n",
       "      <td>390.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.86</td>\n",
       "      <td>255.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>18.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>274.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>64.3</td>\n",
       "      <td>482.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.91</td>\n",
       "      <td>387.0</td>\n",
       "      <td>7.47</td>\n",
       "      <td>17.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.18</td>\n",
       "      <td>360.0</td>\n",
       "      <td>6.28</td>\n",
       "      <td>21.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8.0</td>\n",
       "      <td>240.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>61.4</td>\n",
       "      <td>409.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.53</td>\n",
       "      <td>370.0</td>\n",
       "      <td>6.63</td>\n",
       "      <td>19.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.0</td>\n",
       "      <td>234.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>343.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.87</td>\n",
       "      <td>324.0</td>\n",
       "      <td>6.35</td>\n",
       "      <td>21.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>461.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.46</td>\n",
       "      <td>354.0</td>\n",
       "      <td>7.81</td>\n",
       "      <td>27.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>368.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.72</td>\n",
       "      <td>282.0</td>\n",
       "      <td>7.83</td>\n",
       "      <td>11.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15.0</td>\n",
       "      <td>213.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>347.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.35</td>\n",
       "      <td>288.0</td>\n",
       "      <td>7.23</td>\n",
       "      <td>14.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>335.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.92</td>\n",
       "      <td>276.0</td>\n",
       "      <td>7.28</td>\n",
       "      <td>23.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>44.2</td>\n",
       "      <td>347.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.70</td>\n",
       "      <td>266.0</td>\n",
       "      <td>7.83</td>\n",
       "      <td>26.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.40</td>\n",
       "      <td>306.0</td>\n",
       "      <td>7.14</td>\n",
       "      <td>30.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>291.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.45</td>\n",
       "      <td>258.0</td>\n",
       "      <td>6.77</td>\n",
       "      <td>23.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24.0</td>\n",
       "      <td>187.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>49.2</td>\n",
       "      <td>386.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.44</td>\n",
       "      <td>296.0</td>\n",
       "      <td>7.82</td>\n",
       "      <td>16.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>397.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.09</td>\n",
       "      <td>288.0</td>\n",
       "      <td>8.27</td>\n",
       "      <td>26.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.17</td>\n",
       "      <td>150.0</td>\n",
       "      <td>6.76</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>312.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.50</td>\n",
       "      <td>264.0</td>\n",
       "      <td>7.09</td>\n",
       "      <td>16.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>308.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.69</td>\n",
       "      <td>282.0</td>\n",
       "      <td>6.55</td>\n",
       "      <td>21.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31.0</td>\n",
       "      <td>180.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.67</td>\n",
       "      <td>330.0</td>\n",
       "      <td>7.27</td>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.85</td>\n",
       "      <td>276.0</td>\n",
       "      <td>7.59</td>\n",
       "      <td>21.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.00</td>\n",
       "      <td>48.0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44.0</td>\n",
       "      <td>156.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>29.1</td>\n",
       "      <td>194.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.25</td>\n",
       "      <td>175.0</td>\n",
       "      <td>6.65</td>\n",
       "      <td>21.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45.0</td>\n",
       "      <td>153.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>34.5</td>\n",
       "      <td>287.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.11</td>\n",
       "      <td>209.0</td>\n",
       "      <td>8.24</td>\n",
       "      <td>11.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46.0</td>\n",
       "      <td>151.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>44.3</td>\n",
       "      <td>399.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.90</td>\n",
       "      <td>267.0</td>\n",
       "      <td>8.97</td>\n",
       "      <td>26.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47.0</td>\n",
       "      <td>150.5</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>41.1</td>\n",
       "      <td>330.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.00</td>\n",
       "      <td>247.0</td>\n",
       "      <td>8.02</td>\n",
       "      <td>22.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48.0</td>\n",
       "      <td>149.5</td>\n",
       "      <td>12.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>44.5</td>\n",
       "      <td>438.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.38</td>\n",
       "      <td>269.0</td>\n",
       "      <td>9.77</td>\n",
       "      <td>16.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.30</td>\n",
       "      <td>198.0</td>\n",
       "      <td>9.79</td>\n",
       "      <td>19.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>37.5</td>\n",
       "      <td>371.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.38</td>\n",
       "      <td>227.0</td>\n",
       "      <td>9.81</td>\n",
       "      <td>28.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>306.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.54</td>\n",
       "      <td>198.0</td>\n",
       "      <td>9.27</td>\n",
       "      <td>15.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.55</td>\n",
       "      <td>240.0</td>\n",
       "      <td>6.75</td>\n",
       "      <td>21.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>42.4</td>\n",
       "      <td>352.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.33</td>\n",
       "      <td>256.0</td>\n",
       "      <td>8.25</td>\n",
       "      <td>21.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.2</td>\n",
       "      <td>377.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>94.25</td>\n",
       "      <td>242.0</td>\n",
       "      <td>9.35</td>\n",
       "      <td>60.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>335.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.83</td>\n",
       "      <td>210.0</td>\n",
       "      <td>9.57</td>\n",
       "      <td>35.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>65.0</td>\n",
       "      <td>111.5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>281.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.12</td>\n",
       "      <td>180.0</td>\n",
       "      <td>9.37</td>\n",
       "      <td>22.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>67.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>237.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.33</td>\n",
       "      <td>163.0</td>\n",
       "      <td>8.72</td>\n",
       "      <td>18.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>68.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>37.2</td>\n",
       "      <td>398.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.80</td>\n",
       "      <td>224.0</td>\n",
       "      <td>10.66</td>\n",
       "      <td>22.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>38 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    alls_POS    Pts  alls_Mat  alls_Wkts   Dots  alls_4s  alls_6s  Catches  \\\n",
       "0        1.0  369.0      14.0       11.0   61.0     31.0     52.0      4.0   \n",
       "1        2.0  342.0      16.0       14.0   94.0     28.0     29.0     11.0   \n",
       "2        3.0  274.5      17.0       22.0  190.0      1.0      0.0      2.0   \n",
       "3        4.0  255.0      17.0       26.0  149.0      0.0      0.0      6.0   \n",
       "5        6.0  247.5      15.0       17.0  166.0      2.0      2.0      4.0   \n",
       "7        8.0  240.5      16.0       19.0  169.0      0.0      0.0      2.0   \n",
       "8        9.0  234.5      16.0       15.0  128.0      7.0      4.0      9.0   \n",
       "11      12.0  226.0      15.0       13.0  168.0      1.0      0.0      4.0   \n",
       "13      14.0  219.0      12.0       25.0  113.0      0.0      1.0      6.0   \n",
       "14      15.0  213.0      14.0       20.0  107.0      8.0      1.0      5.0   \n",
       "16      17.0  211.0      16.0       12.0   94.0     18.0      5.0      5.0   \n",
       "18      19.0  205.0      12.0       10.0   96.0     17.0      9.0      0.0   \n",
       "19      20.0  203.0      14.0       10.0  110.0     10.0      3.0      9.0   \n",
       "20      21.0  198.0      14.0       19.0  119.0      0.0      0.0      5.0   \n",
       "21      22.0  191.0      11.0       11.0  121.0      4.0      4.0      3.0   \n",
       "23      24.0  187.5      14.0       18.0  117.0      0.0      0.0      3.0   \n",
       "24      25.0  187.0      13.0       11.0  141.0      0.0      0.0      3.0   \n",
       "25      26.0  186.0      11.0        6.0   63.0     16.0     17.0      1.0   \n",
       "27      28.0  183.0      11.0       16.0  117.0      0.0      0.0      4.0   \n",
       "28      29.0  183.0      13.0       13.0  125.0      2.0      0.0      3.0   \n",
       "30      31.0  180.5      14.0       15.0  100.0      3.0      3.0      4.0   \n",
       "31      32.0  176.0      13.0       13.0  122.0      1.0      1.0      1.0   \n",
       "35      36.0  174.0      14.0        3.0   15.0     27.0     21.0      3.0   \n",
       "43      44.0  156.5       8.0        8.0   69.0      8.0      7.0      6.0   \n",
       "44      45.0  153.5       9.0       19.0   87.0      0.0      0.0      0.0   \n",
       "45      46.0  151.5      13.0       10.0   87.0      4.0      2.0      5.0   \n",
       "46      47.0  150.5      12.0       11.0   74.0      6.0      3.0      5.0   \n",
       "47      48.0  149.5      12.0       16.0   91.0      0.0      0.0      1.0   \n",
       "49      50.0  143.0       9.0       10.0   60.0     13.0      3.0      2.0   \n",
       "50      51.0  137.0      11.0        8.0   88.0      3.0      1.0      4.0   \n",
       "51      52.0  133.0       9.0       13.0   68.0      1.0      2.0      4.0   \n",
       "54      55.0  129.0      11.0       11.0   83.0      2.0      0.0      1.0   \n",
       "55      56.0  129.0      11.0       12.0   82.0      1.0      0.0      1.0   \n",
       "60      61.0  114.0      11.0        4.0   95.0      0.0      0.0      2.0   \n",
       "62      63.0  113.0      10.0        6.0   77.0      1.0      0.0      5.0   \n",
       "64      65.0  111.5      10.0        8.0   65.0      1.0      1.0      5.0   \n",
       "66      67.0  104.0       8.0        9.0   54.0      1.0      1.0      5.0   \n",
       "67      68.0  103.0      11.0       10.0   58.0      0.0      0.0      4.0   \n",
       "\n",
       "    Stumpings  Bat_POS  ...  Bow_Inns    Ov  Bow_Runs  BBI   4w   5w  Bow_Avg  \\\n",
       "0         0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "1         0.0     16.0  ...      16.0  42.3     390.0  0.0  0.0  0.0    27.86   \n",
       "2         0.0      0.0  ...      17.0  64.3     482.0  0.0  0.0  0.0    21.91   \n",
       "3         0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "5         0.0     76.0  ...      15.0  60.0     377.0  0.0  0.0  0.0    22.18   \n",
       "7         0.0      0.0  ...      16.0  61.4     409.0  0.0  0.0  0.0    21.53   \n",
       "8         0.0     51.0  ...      16.0  54.0     343.0  0.0  0.0  0.0    22.87   \n",
       "11        0.0     92.0  ...      15.0  59.0     461.0  0.0  0.0  0.0    35.46   \n",
       "13        0.0     91.0  ...      12.0  47.0     368.0  0.0  2.0  0.0    14.72   \n",
       "14        0.0     67.0  ...      14.0  48.0     347.0  0.0  0.0  0.0    17.35   \n",
       "16        0.0     39.0  ...      16.0  46.0     335.0  0.0  0.0  0.0    27.92   \n",
       "18        0.0     46.0  ...      12.0  44.2     347.0  0.0  0.0  0.0    34.70   \n",
       "19        0.0     50.0  ...      14.0  51.0     364.0  0.0  0.0  0.0    36.40   \n",
       "20        0.0      0.0  ...       0.0   0.0       0.0  0.0  0.0  0.0     0.00   \n",
       "21        0.0     64.0  ...      11.0  43.0     291.0  0.0  0.0  0.0    26.45   \n",
       "23        0.0      0.0  ...      14.0  49.2     386.0  0.0  1.0  0.0    21.44   \n",
       "24        0.0      0.0  ...      13.0  48.0     397.0  0.0  0.0  0.0    36.09   \n",
       "25        0.0     35.0  ...       9.0  25.0     169.0  0.0  0.0  0.0    28.17   \n",
       "27        0.0      0.0  ...      11.0  44.0     312.0  0.0  0.0  0.0    19.50   \n",
       "28        0.0     94.0  ...      13.0  47.0     308.0  0.0  0.0  0.0    23.69   \n",
       "30        0.0     72.0  ...      14.0  55.0     400.0  0.0  0.0  0.0    26.67   \n",
       "31        0.0     97.0  ...      13.0  46.0     349.0  0.0  0.0  0.0    26.85   \n",
       "35        0.0     24.0  ...       6.0   8.0      72.0  0.0  0.0  0.0    24.00   \n",
       "43        0.0     49.0  ...       8.0  29.1     194.0  0.0  1.0  0.0    24.25   \n",
       "44        0.0      0.0  ...       9.0  34.5     287.0  0.0  0.0  0.0    15.11   \n",
       "45        0.0     71.0  ...      13.0  44.3     399.0  0.0  0.0  0.0    39.90   \n",
       "46        0.0     60.0  ...      12.0  41.1     330.0  0.0  0.0  0.0    30.00   \n",
       "47        0.0      0.0  ...      12.0  44.5     438.0  0.0  2.0  0.0    27.38   \n",
       "49        0.0     55.0  ...       9.0  33.0     323.0  0.0  1.0  0.0    32.30   \n",
       "50        0.0     80.0  ...      11.0  37.5     371.0  0.0  0.0  0.0    46.38   \n",
       "51        0.0     77.0  ...       9.0  33.0     306.0  0.0  0.0  0.0    23.54   \n",
       "54        0.0     81.0  ...      11.0  40.0     270.0  0.0  0.0  0.0    24.55   \n",
       "55        0.0      0.0  ...      11.0  42.4     352.0  0.0  0.0  0.0    29.33   \n",
       "60        0.0      0.0  ...      11.0  40.2     377.0  0.0  0.0  0.0    94.25   \n",
       "62        0.0      0.0  ...      10.0  35.0     335.0  0.0  0.0  0.0    55.83   \n",
       "64        0.0     90.0  ...       9.0  30.0     281.0  0.0  0.0  0.0    35.12   \n",
       "66        0.0     84.0  ...       8.0  27.1     237.0  0.0  0.0  0.0    26.33   \n",
       "67        0.0      0.0  ...      11.0  37.2     398.0  0.0  0.0  0.0    39.80   \n",
       "\n",
       "    Balls  economy  Bow_SR  \n",
       "0     0.0     0.00    0.00  \n",
       "1   255.0     9.18   18.21  \n",
       "2   387.0     7.47   17.59  \n",
       "3     0.0     0.00    0.00  \n",
       "5   360.0     6.28   21.18  \n",
       "7   370.0     6.63   19.47  \n",
       "8   324.0     6.35   21.60  \n",
       "11  354.0     7.81   27.23  \n",
       "13  282.0     7.83   11.28  \n",
       "14  288.0     7.23   14.40  \n",
       "16  276.0     7.28   23.00  \n",
       "18  266.0     7.83   26.60  \n",
       "19  306.0     7.14   30.60  \n",
       "20    0.0     0.00    0.00  \n",
       "21  258.0     6.77   23.45  \n",
       "23  296.0     7.82   16.44  \n",
       "24  288.0     8.27   26.18  \n",
       "25  150.0     6.76   25.00  \n",
       "27  264.0     7.09   16.50  \n",
       "28  282.0     6.55   21.69  \n",
       "30  330.0     7.27   22.00  \n",
       "31  276.0     7.59   21.23  \n",
       "35   48.0     9.00   16.00  \n",
       "43  175.0     6.65   21.88  \n",
       "44  209.0     8.24   11.00  \n",
       "45  267.0     8.97   26.70  \n",
       "46  247.0     8.02   22.45  \n",
       "47  269.0     9.77   16.81  \n",
       "49  198.0     9.79   19.80  \n",
       "50  227.0     9.81   28.38  \n",
       "51  198.0     9.27   15.23  \n",
       "54  240.0     6.75   21.82  \n",
       "55  256.0     8.25   21.33  \n",
       "60  242.0     9.35   60.50  \n",
       "62  210.0     9.57   35.00  \n",
       "64  180.0     9.37   22.50  \n",
       "66  163.0     8.72   18.11  \n",
       "67  224.0    10.66   22.40  \n",
       "\n",
       "[38 rows x 30 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.query('alls_Wkts >= 3 & Pts > 100')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.19 Applying groupby  on the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings', 'Bat_POS', 'Bat_Inns', 'NO',\n",
       "       'Bat_Runs', 'HS', 'BF', '100', '50', 'Bat_Avg', 'Bat_SR', 'Bow_POS',\n",
       "       'Bow_Inns', 'Ov', 'Bow_Runs', 'BBI', '4w', '5w', 'Bow_Avg', 'Balls',\n",
       "       'economy', 'Bow_SR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4w\n",
       "0.0    160\n",
       "1.0      3\n",
       "2.0      3\n",
       "Name: Dots, dtype: int64"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.groupby('4w')['Dots'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "alls_Mat\n",
       "0.0      0.000000\n",
       "1.0      3.000000\n",
       "2.0      8.750000\n",
       "3.0     12.133333\n",
       "4.0     11.333333\n",
       "5.0     25.700000\n",
       "6.0     41.333333\n",
       "7.0     20.714286\n",
       "8.0     23.375000\n",
       "9.0     52.714286\n",
       "10.0    33.428571\n",
       "11.0    78.666667\n",
       "12.0    34.000000\n",
       "13.0    52.888889\n",
       "14.0    44.928571\n",
       "15.0    69.600000\n",
       "16.0    44.090909\n",
       "17.0    68.000000\n",
       "Name: Dots, dtype: float64"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.groupby('alls_Mat')['Dots'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "alls_Mat  5w \n",
       "0.0       0.0     5\n",
       "1.0       0.0    19\n",
       "2.0       0.0    12\n",
       "3.0       0.0    14\n",
       "          1.0     1\n",
       "4.0       0.0     9\n",
       "5.0       0.0    10\n",
       "6.0       0.0     3\n",
       "7.0       0.0     7\n",
       "8.0       0.0     8\n",
       "9.0       0.0     7\n",
       "10.0      0.0     7\n",
       "11.0      0.0     9\n",
       "12.0      0.0    11\n",
       "13.0      0.0     9\n",
       "14.0      0.0    14\n",
       "15.0      0.0     5\n",
       "16.0      0.0    11\n",
       "17.0      0.0     5\n",
       "Name: Dots, dtype: int64"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer.groupby(['alls_Mat', '5w'])['Dots'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> 1.20 Applying clustering "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(n_clusters=3)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters = KMeans(3)\n",
    "clusters.fit(df_outer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outer[\"clusterid\"] = clusters.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alls_POS</th>\n",
       "      <th>Pts</th>\n",
       "      <th>alls_Mat</th>\n",
       "      <th>alls_Wkts</th>\n",
       "      <th>Dots</th>\n",
       "      <th>alls_4s</th>\n",
       "      <th>alls_6s</th>\n",
       "      <th>Catches</th>\n",
       "      <th>Stumpings</th>\n",
       "      <th>Bat_POS</th>\n",
       "      <th>...</th>\n",
       "      <th>Ov</th>\n",
       "      <th>Bow_Runs</th>\n",
       "      <th>BBI</th>\n",
       "      <th>4w</th>\n",
       "      <th>5w</th>\n",
       "      <th>Bow_Avg</th>\n",
       "      <th>Balls</th>\n",
       "      <th>economy</th>\n",
       "      <th>Bow_SR</th>\n",
       "      <th>clusterid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>247.5</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.0</td>\n",
       "      <td>247.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10.0</td>\n",
       "      <td>231.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11.0</td>\n",
       "      <td>227.5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    alls_POS    Pts  alls_Mat  alls_Wkts  Dots  alls_4s  alls_6s  Catches  \\\n",
       "4        5.0  247.5      16.0        0.0   0.0     45.0     25.0     17.0   \n",
       "6        7.0  247.0      16.0        0.0   0.0     37.0     27.0     18.0   \n",
       "9       10.0  231.5      13.0        0.0   0.0     45.0     34.0      0.0   \n",
       "10      11.0  227.5      14.0        0.0   0.0     49.0     25.0      7.0   \n",
       "15      16.0  211.0      16.0        0.0   0.0     64.0     11.0      5.0   \n",
       "\n",
       "    Stumpings  Bat_POS  ...   Ov  Bow_Runs  BBI   4w   5w  Bow_Avg  Balls  \\\n",
       "4         2.0      3.0  ...  0.0       0.0  0.0  0.0  0.0      0.0    0.0   \n",
       "6         6.0      7.0  ...  0.0       0.0  0.0  0.0  0.0      0.0    0.0   \n",
       "9         0.0      6.0  ...  0.0       0.0  0.0  0.0  0.0      0.0    0.0   \n",
       "10        0.0      2.0  ...  0.0       0.0  0.0  0.0  0.0      0.0    0.0   \n",
       "15        0.0      4.0  ...  0.0       0.0  0.0  0.0  0.0      0.0    0.0   \n",
       "\n",
       "    economy  Bow_SR  clusterid  \n",
       "4       0.0     0.0          0  \n",
       "6       0.0     0.0          0  \n",
       "9       0.0     0.0          0  \n",
       "10      0.0     0.0          0  \n",
       "15      0.0     0.0          0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outer[df_outer[\"clusterid\"] == 0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(34, 31)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0 = df_outer[df_outer[\"clusterid\"] == 0 ]\n",
    "df_0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['alls_POS', 'Pts', 'alls_Mat', 'alls_Wkts', 'Dots', 'alls_4s',\n",
       "       'alls_6s', 'Catches', 'Stumpings', 'Bat_POS', 'Bat_Inns', 'NO',\n",
       "       'Bat_Runs', 'HS', 'BF', '100', '50', 'Bat_Avg', 'Bat_SR', 'Bow_POS',\n",
       "       'Bow_Inns', 'Ov', 'Bow_Runs', 'BBI', '4w', '5w', 'Bow_Avg', 'Balls',\n",
       "       'economy', 'Bow_SR', 'clusterid'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_0.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ffafc11f760>]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_pts = df_0[\"Pts\"].sort_values()\n",
    "plt.plot(sorted_pts)\n",
    "#plt.plot(x=df_0[\"Bow_POS\"], y=df_0[\"Bow_Avg\"])\n",
    "#plt.plot(df_0[\"alls_Mat\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(88, 31)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1 = df_outer[df_outer[\"clusterid\"] == 1 ]\n",
    "df_1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ffafc6160d0>]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_pts = df_1[\"Pts\"].sort_values()\n",
    "plt.plot(sorted_pts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(44, 31)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2 = df_outer[df_outer[\"clusterid\"] == 2 ]\n",
    "df_2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ffafc673520>]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_pts = df_2[\"Pts\"].sort_values()\n",
    "plt.plot(sorted_pts)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
